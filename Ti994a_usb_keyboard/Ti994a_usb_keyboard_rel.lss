
Ti994a_usb_keyboard_rel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00000a52  00000ae6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  008001e4  008001e4  00000bca  2**0
                  ALLOC
  3 .debug_aranges 00000070  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e9  00000000  00000000  00000c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb5  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000387  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c63  00000000  00000000  00001d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000029c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00002a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bf7  00000000  00000000  00002e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	bf c0       	rjmp	.+382    	; 0x180 <__ctors_end>
   2:	00 00       	nop
   4:	d8 c0       	rjmp	.+432    	; 0x1b6 <__bad_interrupt>
   6:	00 00       	nop
   8:	d6 c0       	rjmp	.+428    	; 0x1b6 <__bad_interrupt>
   a:	00 00       	nop
   c:	d4 c0       	rjmp	.+424    	; 0x1b6 <__bad_interrupt>
   e:	00 00       	nop
  10:	d2 c0       	rjmp	.+420    	; 0x1b6 <__bad_interrupt>
  12:	00 00       	nop
  14:	d0 c0       	rjmp	.+416    	; 0x1b6 <__bad_interrupt>
  16:	00 00       	nop
  18:	ce c0       	rjmp	.+412    	; 0x1b6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ca c0       	rjmp	.+404    	; 0x1b6 <__bad_interrupt>
  22:	00 00       	nop
  24:	c8 c0       	rjmp	.+400    	; 0x1b6 <__bad_interrupt>
  26:	00 00       	nop
  28:	1c c3       	rjmp	.+1592   	; 0x662 <__vector_10>
  2a:	00 00       	nop
  2c:	86 c3       	rjmp	.+1804   	; 0x73a <__vector_11>
  2e:	00 00       	nop
  30:	c2 c0       	rjmp	.+388    	; 0x1b6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c0 c0       	rjmp	.+384    	; 0x1b6 <__bad_interrupt>
  36:	00 00       	nop
  38:	be c0       	rjmp	.+380    	; 0x1b6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	bc c0       	rjmp	.+376    	; 0x1b6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ba c0       	rjmp	.+372    	; 0x1b6 <__bad_interrupt>
  42:	00 00       	nop
  44:	b8 c0       	rjmp	.+368    	; 0x1b6 <__bad_interrupt>
  46:	00 00       	nop
  48:	b6 c0       	rjmp	.+364    	; 0x1b6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b4 c0       	rjmp	.+360    	; 0x1b6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b2 c0       	rjmp	.+356    	; 0x1b6 <__bad_interrupt>
  52:	00 00       	nop
  54:	b0 c0       	rjmp	.+352    	; 0x1b6 <__bad_interrupt>
  56:	00 00       	nop
  58:	ae c0       	rjmp	.+348    	; 0x1b6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ad c0       	rjmp	.+346    	; 0x1b8 <__vector_23>
  5e:	00 00       	nop
  60:	aa c0       	rjmp	.+340    	; 0x1b6 <__bad_interrupt>
  62:	00 00       	nop
  64:	a8 c0       	rjmp	.+336    	; 0x1b6 <__bad_interrupt>
  66:	00 00       	nop
  68:	a6 c0       	rjmp	.+332    	; 0x1b6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a4 c0       	rjmp	.+328    	; 0x1b6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a2 c0       	rjmp	.+324    	; 0x1b6 <__bad_interrupt>
  72:	00 00       	nop
  74:	a0 c0       	rjmp	.+320    	; 0x1b6 <__bad_interrupt>
  76:	00 00       	nop
  78:	9e c0       	rjmp	.+316    	; 0x1b6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	9c c0       	rjmp	.+312    	; 0x1b6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	9a c0       	rjmp	.+308    	; 0x1b6 <__bad_interrupt>
  82:	00 00       	nop
  84:	98 c0       	rjmp	.+304    	; 0x1b6 <__bad_interrupt>
  86:	00 00       	nop
  88:	96 c0       	rjmp	.+300    	; 0x1b6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	94 c0       	rjmp	.+296    	; 0x1b6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	92 c0       	rjmp	.+292    	; 0x1b6 <__bad_interrupt>
  92:	00 00       	nop
  94:	90 c0       	rjmp	.+288    	; 0x1b6 <__bad_interrupt>
  96:	00 00       	nop
  98:	8e c0       	rjmp	.+284    	; 0x1b6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	8c c0       	rjmp	.+280    	; 0x1b6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	8a c0       	rjmp	.+276    	; 0x1b6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	88 c0       	rjmp	.+272    	; 0x1b6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	86 c0       	rjmp	.+268    	; 0x1b6 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 e3 00 12 00 02 00 00 f5 00 22 00 22     ............."."
  bc:	00 00 17 01 3f 00 21 00 00 07 01 09 00 03 00 00     ....?.!.........
  cc:	56 01 04 01 03 09 04 5a 01 10 02 03 09 04 6c 01     V......Z......l.
  dc:	12                                                  .

000000dd <endpoint_config_table>:
  dd:	00 00 01 c1 06 00                                   ......

000000e3 <device_descriptor>:
  e3:	12 01 00 02 00 00 00 20 c0 16 7c 04 00 01 01 02     ....... ..|.....
  f3:	00 01                                               ..

000000f5 <config1_descriptor>:
  f5:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
 105:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 115:	00 01                                               ..

00000117 <keyboard_hid_report_desc>:
 117:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 127:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 137:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 147:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

00000156 <string0>:
 156:	04 03 09 04                                         ....

0000015a <string1>:
 15a:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 16a:	00 00                                               ..

0000016c <string2>:
 16c:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 17c:	64 00 00 00                                         d...

00000180 <__ctors_end>:
 180:	11 24       	eor	r1, r1
 182:	1f be       	out	0x3f, r1	; 63
 184:	cf ef       	ldi	r28, 0xFF	; 255
 186:	da e0       	ldi	r29, 0x0A	; 10
 188:	de bf       	out	0x3e, r29	; 62
 18a:	cd bf       	out	0x3d, r28	; 61

0000018c <__do_copy_data>:
 18c:	11 e0       	ldi	r17, 0x01	; 1
 18e:	a0 e0       	ldi	r26, 0x00	; 0
 190:	b1 e0       	ldi	r27, 0x01	; 1
 192:	e2 e5       	ldi	r30, 0x52	; 82
 194:	fa e0       	ldi	r31, 0x0A	; 10
 196:	02 c0       	rjmp	.+4      	; 0x19c <.do_copy_data_start>

00000198 <.do_copy_data_loop>:
 198:	05 90       	lpm	r0, Z+
 19a:	0d 92       	st	X+, r0

0000019c <.do_copy_data_start>:
 19c:	a4 3e       	cpi	r26, 0xE4	; 228
 19e:	b1 07       	cpc	r27, r17
 1a0:	d9 f7       	brne	.-10     	; 0x198 <.do_copy_data_loop>

000001a2 <__do_clear_bss>:
 1a2:	11 e0       	ldi	r17, 0x01	; 1
 1a4:	a4 ee       	ldi	r26, 0xE4	; 228
 1a6:	b1 e0       	ldi	r27, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <.do_clear_bss_start>

000001aa <.do_clear_bss_loop>:
 1aa:	1d 92       	st	X+, r1

000001ac <.do_clear_bss_start>:
 1ac:	a4 3f       	cpi	r26, 0xF4	; 244
 1ae:	b1 07       	cpc	r27, r17
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <.do_clear_bss_loop>
 1b2:	39 d0       	rcall	.+114    	; 0x226 <main>
 1b4:	4c c4       	rjmp	.+2200   	; 0xa4e <_exit>

000001b6 <__bad_interrupt>:
 1b6:	24 cf       	rjmp	.-440    	; 0x0 <__vectors>

000001b8 <__vector_23>:
// This interrupt routine is run approx 61 times per second.
// A very simple inactivity timeout is implemented, where the
// LED is blinking.

ISR(TIMER0_OVF_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	8f 93       	push	r24
 1c4:	9f 93       	push	r25
	uTsek++;
 1c6:	80 91 e4 01 	lds	r24, 0x01E4
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 e4 01 	sts	0x01E4, r24
	bTsek = 0;
 1d0:	10 92 e5 01 	sts	0x01E5, r1
	if (uTsek >= 6)
 1d4:	86 30       	cpi	r24, 0x06	; 6
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <__vector_23+0x2a>
	{
		uTsek = 0;
 1d8:	10 92 e4 01 	sts	0x01E4, r1
		bTsek = 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	80 93 e5 01 	sts	0x01E5, r24
	}
	
	idle_count++;
 1e2:	80 91 e6 01 	lds	r24, 0x01E6
 1e6:	90 91 e7 01 	lds	r25, 0x01E7
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 93 e7 01 	sts	0x01E7, r25
 1f0:	80 93 e6 01 	sts	0x01E6, r24
	if (idle_count > 61 * 1)
 1f4:	ce 97       	sbiw	r24, 0x3e	; 62
 1f6:	80 f0       	brcs	.+32     	; 0x218 <__vector_23+0x60>
	{
		idle_count = 0;
 1f8:	10 92 e7 01 	sts	0x01E7, r1
 1fc:	10 92 e6 01 	sts	0x01E6, r1
		
		if (Pin_D4_Led)
 200:	80 91 e8 01 	lds	r24, 0x01E8
 204:	88 23       	and	r24, r24
 206:	21 f0       	breq	.+8      	; 0x210 <__vector_23+0x58>
		{
			Pin_D4_Led = 0;
 208:	10 92 e8 01 	sts	0x01E8, r1
			LED_ON;
 20c:	5e 9a       	sbi	0x0b, 6	; 11
 20e:	04 c0       	rjmp	.+8      	; 0x218 <__vector_23+0x60>
//			print("Led ON\n");
		}
		else
		{
			Pin_D4_Led = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 e8 01 	sts	0x01E8, r24
			LED_OFF;
 216:	5e 98       	cbi	0x0b, 6	; 11
//			print("Led OFF\n");
		}
//		print("Timer Event :)\n");
//		usb_keyboard_press(KEY_SPACE, 0);
	}
}
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <main>:
	{'Z', KEY_Z,         0},		//Ti kb
};


int main(void)
{
 226:	4f 92       	push	r4
 228:	5f 92       	push	r5
 22a:	6f 92       	push	r6
 22c:	7f 92       	push	r7
 22e:	8f 92       	push	r8
 230:	9f 92       	push	r9
 232:	af 92       	push	r10
 234:	bf 92       	push	r11
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	uchar prev_usbmod = 0;
	
	uchar arKbDelay = 0;	// Auto repeat keyboard delay
	
	// set for 16 MHz clock, and make sure all outputs are off 
	CPU_PRESCALE(0);
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	80 93 61 00 	sts	0x0061, r24
 24c:	10 92 61 00 	sts	0x0061, r1

	DDR_OUT   = 0x40;	//All Input, D6 output (LED)
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	8a b9       	out	0x0a, r24	; 10
	DDR_INP   = 0x00;	//All Input
 254:	14 b8       	out	0x04, r1	; 4
	PORT_INP |= 0xFF;	//And Pull-up resistors
 256:	85 b1       	in	r24, 0x05	; 5
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	85 b9       	out	0x05, r24	; 5

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 25c:	93 d1       	rcall	.+806    	; 0x584 <usb_init>
	while (!usb_configured()) /* wait */ ;
 25e:	a9 d1       	rcall	.+850    	; 0x5b2 <usb_configured>
 260:	88 23       	and	r24, r24
 262:	e9 f3       	breq	.-6      	; 0x25e <main+0x38>
 264:	80 e1       	ldi	r24, 0x10	; 16
 266:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 268:	20 e9       	ldi	r18, 0x90	; 144
 26a:	31 e0       	ldi	r19, 0x01	; 1
 26c:	f9 01       	movw	r30, r18
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 272:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 274:	d9 f7       	brne	.-10     	; 0x26c <main+0x46>
	
	// Configure timer 0 to generate a timer overflow interrupt every
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
 276:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 6e 00 	sts	0x006E, r24
 282:	a0 e0       	ldi	r26, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	ff 24       	eor	r15, r15
 * no open collector outputs. To overcome this problem
 * only one pin is used as an output pin and all others are
 * switched to input.
 */

		DDR_OUT = LED_OUT | TIKB_P_5;
 288:	20 ec       	ldi	r18, 0xC0	; 192
 28a:	92 2e       	mov	r9, r18
 28c:	c0 e2       	ldi	r28, 0x20	; 32
 28e:	de e4       	ldi	r29, 0x4E	; 78
			h_caps = caps;
			print("CAPS\n");
		}
#endif

		DDR_OUT = LED_OUT | TIKB_2_Y0;
 290:	94 e4       	ldi	r25, 0x44	; 68
 292:	b9 2e       	mov	r11, r25
		PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y0;
		SBZ(TIKB_2_Y0);
		_delay_ms(5);
		pins  = PINS_INP;
		SBO(TIKB_2_Y0);
		shift = TB(TIKB_INT_8);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	c8 2e       	mov	r12, r24
 298:	d1 2c       	mov	r13, r1
			print("FCTN\n");
		}
#endif		
		do
		{
			DDR_OUT = LED_OUT | TIKB_1_Y0;
 29a:	01 e4       	ldi	r16, 0x41	; 65
 29c:	80 2e       	mov	r8, r16
			PORT_OUT |= OUT_PULLUP & ~TIKB_1_Y0;
			SBZ(TIKB_1_Y0);
			_delay_ms(5);
			pins = ~PINS_INP; 
			SBO(TIKB_1_Y0);
 29e:	77 24       	eor	r7, r7
 2a0:	73 94       	inc	r7
#if defined TI_SCAN_DBG
			print("1_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "NHY65GTB")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_1_Y1;
 2a2:	12 e4       	ldi	r17, 0x42	; 66
 2a4:	61 2e       	mov	r6, r17
#if defined TI_SCAN_DBG
			print("2_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "= \n")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y1;
 2a6:	b8 e4       	ldi	r27, 0x48	; 72
 2a8:	5b 2e       	mov	r5, r27
#if defined TI_SCAN_DBG
			print("2_Y1="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ".LO92SWX")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_2_Y2;
 2aa:	f0 e5       	ldi	r31, 0x50	; 80
 2ac:	4f 2e       	mov	r4, r31
#if defined TI_SCAN_DBG
			print("2_Y2="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ",KI83DEC")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y3;
 2ae:	e0 e6       	ldi	r30, 0x60	; 96
 2b0:	ae 2e       	mov	r10, r30
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x92>
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
	TCCR0B = 0x05;
	TIMSK0 = (1<<TOIE0);
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	ff 24       	eor	r15, r15
 * no open collector outputs. To overcome this problem
 * only one pin is used as an output pin and all others are
 * switched to input.
 */

		DDR_OUT = LED_OUT | TIKB_P_5;
 2b8:	9a b8       	out	0x0a, r9	; 10
		PORT_OUT |= OUT_PULLUP & ~TIKB_P_5;
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	8f 63       	ori	r24, 0x3F	; 63
 2be:	8b b9       	out	0x0b, r24	; 11
		SBZ(TIKB_P_5);
 2c0:	5f 98       	cbi	0x0b, 7	; 11
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <main+0x9e>
		_delay_ms(5);
		pins = PINS_INP;
 2c8:	e3 b0       	in	r14, 0x03	; 3
		SBO(TIKB_P_5);
 2ca:	5f 9a       	sbi	0x0b, 7	; 11
			h_caps = caps;
			print("CAPS\n");
		}
#endif

		DDR_OUT = LED_OUT | TIKB_2_Y0;
 2cc:	ba b8       	out	0x0a, r11	; 10
		PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y0;
 2ce:	8b b1       	in	r24, 0x0b	; 11
 2d0:	8b 6b       	ori	r24, 0xBB	; 187
 2d2:	8b b9       	out	0x0b, r24	; 11
		SBZ(TIKB_2_Y0);
 2d4:	5a 98       	cbi	0x0b, 2	; 11
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0xb2>
		_delay_ms(5);
		pins  = PINS_INP;
 2dc:	83 b1       	in	r24, 0x03	; 3
		SBO(TIKB_2_Y0);
 2de:	5a 9a       	sbi	0x0b, 2	; 11
		shift = TB(TIKB_INT_8);
 2e0:	48 2f       	mov	r20, r24
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	ca 01       	movw	r24, r20
 2e6:	65 e0       	ldi	r22, 0x05	; 5
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	6a 95       	dec	r22
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0xc2>
 2f0:	8c 25       	eor	r24, r12
 2f2:	9d 25       	eor	r25, r13
 2f4:	b8 2f       	mov	r27, r24
 2f6:	b1 70       	andi	r27, 0x01	; 1
		ctrl  = TB(TIKB_INT_9);
		fctn  = TB(TIKB_INT_7);
 2f8:	ca 01       	movw	r24, r20
 2fa:	54 e0       	ldi	r21, 0x04	; 4
 2fc:	96 95       	lsr	r25
 2fe:	87 95       	ror	r24
 300:	5a 95       	dec	r21
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0xd6>
 304:	8c 25       	eor	r24, r12
 306:	9d 25       	eor	r25, r13
 308:	68 2f       	mov	r22, r24
 30a:	61 70       	andi	r22, 0x01	; 1
			print("FCTN\n");
		}
#endif		
		do
		{
			DDR_OUT = LED_OUT | TIKB_1_Y0;
 30c:	8a b8       	out	0x0a, r8	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_1_Y0;
 30e:	8b b1       	in	r24, 0x0b	; 11
 310:	8e 6b       	ori	r24, 0xBE	; 190
 312:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_1_Y0);
 314:	58 98       	cbi	0x0b, 0	; 11
 316:	ce 01       	movw	r24, r28
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0xf2>
			_delay_ms(5);
			pins = ~PINS_INP; 
 31c:	33 b1       	in	r19, 0x03	; 3
 31e:	30 95       	com	r19
			SBO(TIKB_1_Y0);
 320:	58 9a       	sbi	0x0b, 0	; 11
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	e0 e0       	ldi	r30, 0x00	; 0
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	06 c0       	rjmp	.+12     	; 0x336 <main+0x110>
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
	{
		if (Pins & mask) return *pThisKeys;
 32a:	89 2f       	mov	r24, r25
 32c:	83 23       	and	r24, r19
 32e:	09 f0       	breq	.+2      	; 0x332 <main+0x10c>
 330:	40 c0       	rjmp	.+128    	; 0x3b2 <main+0x18c>
		
		mask <<= 1;
 332:	99 0f       	add	r25, r25
		pThisKeys += 1;
 334:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 336:	20 81       	ld	r18, Z
 338:	22 23       	and	r18, r18
 33a:	b9 f7       	brne	.-18     	; 0x32a <main+0x104>
 33c:	d4 c0       	rjmp	.+424    	; 0x4e6 <main+0x2c0>
	{
		if (Pins & mask) return *pThisKeys;
 33e:	89 2f       	mov	r24, r25
 340:	83 23       	and	r24, r19
 342:	b9 f5       	brne	.+110    	; 0x3b2 <main+0x18c>
		
		mask <<= 1;
 344:	99 0f       	add	r25, r25
		pThisKeys += 1;
 346:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 348:	20 81       	ld	r18, Z
 34a:	22 23       	and	r18, r18
 34c:	c1 f7       	brne	.-16     	; 0x33e <main+0x118>
 34e:	da c0       	rjmp	.+436    	; 0x504 <main+0x2de>
	{
		if (Pins & mask) return *pThisKeys;
 350:	89 2f       	mov	r24, r25
 352:	83 23       	and	r24, r19
 354:	71 f5       	brne	.+92     	; 0x3b2 <main+0x18c>
		
		mask <<= 1;
 356:	99 0f       	add	r25, r25
		pThisKeys += 1;
 358:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 35a:	20 81       	ld	r18, Z
 35c:	22 23       	and	r18, r18
 35e:	c1 f7       	brne	.-16     	; 0x350 <main+0x12a>
 360:	e0 c0       	rjmp	.+448    	; 0x522 <main+0x2fc>
	{
		if (Pins & mask) return *pThisKeys;
 362:	89 2f       	mov	r24, r25
 364:	83 23       	and	r24, r19
 366:	29 f5       	brne	.+74     	; 0x3b2 <main+0x18c>
		
		mask <<= 1;
 368:	99 0f       	add	r25, r25
		pThisKeys += 1;
 36a:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 36c:	20 81       	ld	r18, Z
 36e:	22 23       	and	r18, r18
 370:	c1 f7       	brne	.-16     	; 0x362 <main+0x13c>
 372:	e6 c0       	rjmp	.+460    	; 0x540 <main+0x31a>
	{
		if (Pins & mask) return *pThisKeys;
 374:	89 2f       	mov	r24, r25
 376:	83 23       	and	r24, r19
 378:	e1 f4       	brne	.+56     	; 0x3b2 <main+0x18c>
		
		mask <<= 1;
 37a:	99 0f       	add	r25, r25
		pThisKeys += 1;
 37c:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 37e:	20 81       	ld	r18, Z
 380:	22 23       	and	r18, r18
 382:	c1 f7       	brne	.-16     	; 0x374 <main+0x14e>
 384:	ec c0       	rjmp	.+472    	; 0x55e <main+0x338>
	{
		if (Pins & mask) return *pThisKeys;
 386:	89 2f       	mov	r24, r25
 388:	83 23       	and	r24, r19
 38a:	99 f4       	brne	.+38     	; 0x3b2 <main+0x18c>
		
		mask <<= 1;
 38c:	99 0f       	add	r25, r25
		pThisKeys += 1;
 38e:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 390:	20 81       	ld	r18, Z
 392:	22 23       	and	r18, r18
 394:	c1 f7       	brne	.-16     	; 0x386 <main+0x160>
		}
		while (0);
		
		if (key == 0)
		{
			if (prev_usbkey != 0)
 396:	aa 23       	and	r26, r26
 398:	09 f4       	brne	.+2      	; 0x39c <main+0x176>
 39a:	8c cf       	rjmp	.-232    	; 0x2b4 <main+0x8e>
			{
				cli();
 39c:	f8 94       	cli
				idle_count = 0;
 39e:	10 92 e7 01 	sts	0x01E7, r1
 3a2:	10 92 e6 01 	sts	0x01E6, r1
				Pin_D4_Led = 1;
 3a6:	70 92 e8 01 	sts	0x01E8, r7
				LED_OFF;
 3aa:	5e 98       	cbi	0x0b, 6	; 11
				sei();
 3ac:	78 94       	sei
 3ae:	a0 e0       	ldi	r26, 0x00	; 0
 3b0:	81 cf       	rjmp	.-254    	; 0x2b4 <main+0x8e>
			phex(key);
			print(" [");
			pchar(key);
			print("]\n");
#endif
			cli();
 3b2:	f8 94       	cli
			idle_count = 0;
 3b4:	10 92 e7 01 	sts	0x01E7, r1
 3b8:	10 92 e6 01 	sts	0x01E6, r1
			Pin_D4_Led = 0;
 3bc:	10 92 e8 01 	sts	0x01E8, r1
			LED_ON;
 3c0:	5e 9a       	sbi	0x0b, 6	; 11
			sei();
 3c2:	78 94       	sei

			usbkey = 0;
			usbmod = 0;
			
			if (key == '\n')
 3c4:	2a 30       	cpi	r18, 0x0A	; 10
 3c6:	11 f4       	brne	.+4      	; 0x3cc <main+0x1a6>
 3c8:	08 e2       	ldi	r16, 0x28	; 40
 3ca:	6e c0       	rjmp	.+220    	; 0x4a8 <main+0x282>
			{
				usbkey = KEY_ENTER;
			}
			else if (fctn)
 3cc:	66 23       	and	r22, r22
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <main+0x1ac>
 3d0:	4d c0       	rjmp	.+154    	; 0x46c <main+0x246>
			{
				switch(key)
 3d2:	2f 34       	cpi	r18, 0x4F	; 79
 3d4:	c9 f1       	breq	.+114    	; 0x448 <main+0x222>
 3d6:	20 35       	cpi	r18, 0x50	; 80
 3d8:	98 f4       	brcc	.+38     	; 0x400 <main+0x1da>
 3da:	25 34       	cpi	r18, 0x45	; 69
 3dc:	61 f1       	breq	.+88     	; 0x436 <main+0x210>
 3de:	26 34       	cpi	r18, 0x46	; 70
 3e0:	40 f4       	brcc	.+16     	; 0x3f2 <main+0x1cc>
 3e2:	23 34       	cpi	r18, 0x43	; 67
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <main+0x1c2>
 3e6:	ca c0       	rjmp	.+404    	; 0x57c <main+0x356>
 3e8:	24 34       	cpi	r18, 0x44	; 68
 3ea:	08 f5       	brcc	.+66     	; 0x42e <main+0x208>
 3ec:	21 34       	cpi	r18, 0x41	; 65
 3ee:	f1 f5       	brne	.+124    	; 0x46c <main+0x246>
 3f0:	20 c0       	rjmp	.+64     	; 0x432 <main+0x20c>
 3f2:	27 34       	cpi	r18, 0x47	; 71
 3f4:	29 f1       	breq	.+74     	; 0x440 <main+0x21a>
 3f6:	27 34       	cpi	r18, 0x47	; 71
 3f8:	00 f1       	brcs	.+64     	; 0x43a <main+0x214>
 3fa:	29 34       	cpi	r18, 0x49	; 73
 3fc:	b9 f5       	brne	.+110    	; 0x46c <main+0x246>
 3fe:	22 c0       	rjmp	.+68     	; 0x444 <main+0x21e>
 400:	24 35       	cpi	r18, 0x54	; 84
 402:	51 f1       	breq	.+84     	; 0x458 <main+0x232>
 404:	25 35       	cpi	r18, 0x55	; 85
 406:	38 f4       	brcc	.+14     	; 0x416 <main+0x1f0>
 408:	22 35       	cpi	r18, 0x52	; 82
 40a:	11 f1       	breq	.+68     	; 0x450 <main+0x22a>
 40c:	23 35       	cpi	r18, 0x53	; 83
 40e:	10 f5       	brcc	.+68     	; 0x454 <main+0x22e>
 410:	20 35       	cpi	r18, 0x50	; 80
 412:	61 f5       	brne	.+88     	; 0x46c <main+0x246>
 414:	1b c0       	rjmp	.+54     	; 0x44c <main+0x226>
 416:	27 35       	cpi	r18, 0x57	; 87
 418:	19 f1       	breq	.+70     	; 0x460 <main+0x23a>
 41a:	28 35       	cpi	r18, 0x58	; 88
 41c:	18 f4       	brcc	.+6      	; 0x424 <main+0x1fe>
 41e:	25 35       	cpi	r18, 0x55	; 85
 420:	29 f5       	brne	.+74     	; 0x46c <main+0x246>
 422:	1c c0       	rjmp	.+56     	; 0x45c <main+0x236>
 424:	28 35       	cpi	r18, 0x58	; 88
 426:	f1 f0       	breq	.+60     	; 0x464 <main+0x23e>
 428:	2a 35       	cpi	r18, 0x5A	; 90
 42a:	01 f5       	brne	.+64     	; 0x46c <main+0x246>
 42c:	1d c0       	rjmp	.+58     	; 0x468 <main+0x242>
 42e:	0f e4       	ldi	r16, 0x4F	; 79
 430:	a6 c0       	rjmp	.+332    	; 0x57e <main+0x358>
 432:	01 e3       	ldi	r16, 0x31	; 49
 434:	03 c0       	rjmp	.+6      	; 0x43c <main+0x216>
 436:	02 e5       	ldi	r16, 0x52	; 82
 438:	a2 c0       	rjmp	.+324    	; 0x57e <main+0x358>
				{
				case 'A': usbkey = KEY_BACKSLASH; usbmod = KEY_SHIFT; break;
				case 'C': usbkey = KEY_TILDE; usbmod = 0; break;
				case 'D': usbkey = KEY_RIGHT; usbmod = 0; break;
				case 'E': usbkey = KEY_UP; usbmod = 0; break;
 43a:	0f e2       	ldi	r16, 0x2F	; 47
 43c:	12 e0       	ldi	r17, 0x02	; 2
 43e:	a0 c0       	rjmp	.+320    	; 0x580 <main+0x35a>
				case 'F': usbkey = KEY_LEFT_BRACE; usbmod = KEY_SHIFT; break;
 440:	00 e3       	ldi	r16, 0x30	; 48
 442:	fc cf       	rjmp	.-8      	; 0x43c <main+0x216>
				case 'G': usbkey = KEY_RIGHT_BRACE; usbmod = KEY_SHIFT; break;
 444:	08 e3       	ldi	r16, 0x38	; 56
 446:	fa cf       	rjmp	.-12     	; 0x43c <main+0x216>
				case 'I': usbkey = KEY_SLASH; usbmod = KEY_SHIFT; break;
 448:	04 e3       	ldi	r16, 0x34	; 52
 44a:	99 c0       	rjmp	.+306    	; 0x57e <main+0x358>
				case 'O': usbkey = KEY_QUOTE; usbmod = 0; break;
 44c:	04 e3       	ldi	r16, 0x34	; 52
 44e:	f6 cf       	rjmp	.-20     	; 0x43c <main+0x216>
				case 'P': usbkey = KEY_QUOTE; usbmod = KEY_SHIFT; break;
 450:	0f e2       	ldi	r16, 0x2F	; 47
 452:	95 c0       	rjmp	.+298    	; 0x57e <main+0x358>
				case 'R': usbkey = KEY_LEFT_BRACE; usbmod = 0; break;
 454:	00 e5       	ldi	r16, 0x50	; 80
 456:	93 c0       	rjmp	.+294    	; 0x57e <main+0x358>
				case 'S': usbkey = KEY_LEFT; usbmod = 0; break;
 458:	00 e3       	ldi	r16, 0x30	; 48
 45a:	91 c0       	rjmp	.+290    	; 0x57e <main+0x358>
				case 'T': usbkey = KEY_RIGHT_BRACE; usbmod = 0; break;
 45c:	0d e2       	ldi	r16, 0x2D	; 45
 45e:	ee cf       	rjmp	.-36     	; 0x43c <main+0x216>
				case 'U': usbkey = KEY_MINUS; usbmod = KEY_SHIFT; break;
 460:	05 e3       	ldi	r16, 0x35	; 53
 462:	ec cf       	rjmp	.-40     	; 0x43c <main+0x216>
				case 'W': usbkey = KEY_TILDE; usbmod = KEY_SHIFT; break;
 464:	01 e5       	ldi	r16, 0x51	; 81
 466:	8b c0       	rjmp	.+278    	; 0x57e <main+0x358>
				case 'X': usbkey = KEY_DOWN; usbmod = 0; break;
 468:	01 e3       	ldi	r16, 0x31	; 49
 46a:	89 c0       	rjmp	.+274    	; 0x57e <main+0x358>
				case 'Z': usbkey = KEY_BACKSLASH; usbmod = 0; break;
				}
				if (usbkey != 0) fctn = 0;
			}
			if ((usbkey == 0)  && (key >= ' ') && (key <= 'Z'))
 46c:	20 32       	cpi	r18, 0x20	; 32
 46e:	d8 f0       	brcs	.+54     	; 0x4a6 <main+0x280>
 470:	2b 35       	cpi	r18, 0x5B	; 91
 472:	c8 f4       	brcc	.+50     	; 0x4a6 <main+0x280>
			{
				if ((key == '/') && shift)
 474:	2f 32       	cpi	r18, 0x2F	; 47
 476:	29 f4       	brne	.+10     	; 0x482 <main+0x25c>
 478:	bb 23       	and	r27, r27
 47a:	19 f0       	breq	.+6      	; 0x482 <main+0x25c>
 47c:	10 e0       	ldi	r17, 0x00	; 0
 47e:	0d e2       	ldi	r16, 0x2D	; 45
 480:	16 c0       	rjmp	.+44     	; 0x4ae <main+0x288>
					usbkey = KEY_MINUS;
					usbmod = 0;
				}
				else
				{
					usbkey = KeyConv[key-0x20].Usb_key;
 482:	82 2f       	mov	r24, r18
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	80 97       	sbiw	r24, 0x20	; 32
 488:	fc 01       	movw	r30, r24
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	e8 0f       	add	r30, r24
 490:	f9 1f       	adc	r31, r25
 492:	ef 5c       	subi	r30, 0xCF	; 207
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	01 81       	ldd	r16, Z+1	; 0x01
					usbmod = KeyConv[key-0x20].Usb_modifier;
 498:	12 81       	ldd	r17, Z+2	; 0x02
					if (caps && (key >= 'A') && (key <= 'Z'))
 49a:	e4 fc       	sbrc	r14, 4
 49c:	06 c0       	rjmp	.+12     	; 0x4aa <main+0x284>
 49e:	21 34       	cpi	r18, 0x41	; 65
 4a0:	20 f0       	brcs	.+8      	; 0x4aa <main+0x284>
					{
						usbmod |= KEY_SHIFT;
 4a2:	12 60       	ori	r17, 0x02	; 2
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <main+0x284>
 4a6:	00 e0       	ldi	r16, 0x00	; 0
 4a8:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
			}
//When to use this??	if (caps)  usbmod |= KEY_CAPS_LOCK;
			if (shift) usbmod |= KEY_SHIFT;
 4aa:	b1 11       	cpse	r27, r1
 4ac:	12 60       	ori	r17, 0x02	; 2
			if (ctrl)  usbmod |= KEY_CTRL;
 4ae:	46 ff       	sbrs	r20, 6
 4b0:	11 60       	ori	r17, 0x01	; 1
			if (fctn)  usbmod |= KEY_ALT;
 4b2:	61 11       	cpse	r22, r1
 4b4:	14 60       	ori	r17, 0x04	; 4

			if (usbkey != 0)
 4b6:	00 23       	and	r16, r16
 4b8:	11 f4       	brne	.+4      	; 0x4be <main+0x298>
 4ba:	a0 e0       	ldi	r26, 0x00	; 0
 4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <main+0x2ae>
			{
				if ((prev_usbkey != usbkey)
 4be:	a0 17       	cp	r26, r16
 4c0:	29 f4       	brne	.+10     	; 0x4cc <main+0x2a6>
 4c2:	71 17       	cp	r23, r17
 4c4:	19 f4       	brne	.+6      	; 0x4cc <main+0x2a6>
 4c6:	8a e0       	ldi	r24, 0x0A	; 10
 4c8:	f8 16       	cp	r15, r24
 4ca:	31 f4       	brne	.+12     	; 0x4d8 <main+0x2b2>
					print("  UsbKey: 0x");
					phex(usbkey);
					print("  Delay: 0x");
					print("\n");
#endif
					usb_keyboard_press(usbkey, usbmod); 
 4cc:	80 2f       	mov	r24, r16
 4ce:	61 2f       	mov	r22, r17
 4d0:	bb d0       	rcall	.+374    	; 0x648 <usb_keyboard_press>
 4d2:	a0 2f       	mov	r26, r16
 4d4:	71 2f       	mov	r23, r17
 4d6:	f0 ce       	rjmp	.-544    	; 0x2b8 <main+0x92>
				}
				else if (bTsek)
 4d8:	80 91 e5 01 	lds	r24, 0x01E5
 4dc:	88 23       	and	r24, r24
 4de:	09 f4       	brne	.+2      	; 0x4e2 <main+0x2bc>
 4e0:	eb ce       	rjmp	.-554    	; 0x2b8 <main+0x92>
				{
					arKbDelay++;
 4e2:	f3 94       	inc	r15
 4e4:	e9 ce       	rjmp	.-558    	; 0x2b8 <main+0x92>
#if defined TI_SCAN_DBG
			print("1_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "NHY65GTB")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_1_Y1;
 4e6:	6a b8       	out	0x0a, r6	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_1_Y1;
 4e8:	8b b1       	in	r24, 0x0b	; 11
 4ea:	8d 6b       	ori	r24, 0xBD	; 189
 4ec:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_1_Y1);
 4ee:	59 98       	cbi	0x0b, 1	; 11
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 97       	sbiw	r24, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <main+0x2cc>
			_delay_ms(5);
			pins = ~PINS_INP;
 4f6:	33 b1       	in	r19, 0x03	; 3
 4f8:	30 95       	com	r19
			SBO(TIKB_1_Y1);
 4fa:	59 9a       	sbi	0x0b, 1	; 11
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	e9 e0       	ldi	r30, 0x09	; 9
 500:	f1 e0       	ldi	r31, 0x01	; 1
 502:	22 cf       	rjmp	.-444    	; 0x348 <main+0x122>
#if defined TI_SCAN_DBG
			print("1_Y1="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "/;P01AQZ")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_2_Y0;
 504:	ba b8       	out	0x0a, r11	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y0;
 506:	8b b1       	in	r24, 0x0b	; 11
 508:	8b 6b       	ori	r24, 0xBB	; 187
 50a:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y0);
 50c:	5a 98       	cbi	0x0b, 2	; 11
 50e:	ce 01       	movw	r24, r28
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <main+0x2ea>
			_delay_ms(5);
			pins = ~PINS_INP;
 514:	33 b1       	in	r19, 0x03	; 3
 516:	30 95       	com	r19
			SBO(TIKB_2_Y0);
 518:	5a 9a       	sbi	0x0b, 2	; 11
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	e2 e1       	ldi	r30, 0x12	; 18
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	1c cf       	rjmp	.-456    	; 0x35a <main+0x134>
#if defined TI_SCAN_DBG
			print("2_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "= \n")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y1;
 522:	5a b8       	out	0x0a, r5	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y1;
 524:	8b b1       	in	r24, 0x0b	; 11
 526:	87 6b       	ori	r24, 0xB7	; 183
 528:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y1);
 52a:	5b 98       	cbi	0x0b, 3	; 11
 52c:	ce 01       	movw	r24, r28
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <main+0x308>
			_delay_ms(5);
			pins = ~PINS_INP;
 532:	33 b1       	in	r19, 0x03	; 3
 534:	30 95       	com	r19
			SBO(TIKB_2_Y1);
 536:	5b 9a       	sbi	0x0b, 3	; 11
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	e6 e1       	ldi	r30, 0x16	; 22
 53c:	f1 e0       	ldi	r31, 0x01	; 1
 53e:	16 cf       	rjmp	.-468    	; 0x36c <main+0x146>
#if defined TI_SCAN_DBG
			print("2_Y1="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ".LO92SWX")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_2_Y2;
 540:	4a b8       	out	0x0a, r4	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y2;
 542:	8b b1       	in	r24, 0x0b	; 11
 544:	8f 6a       	ori	r24, 0xAF	; 175
 546:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y2);
 548:	5c 98       	cbi	0x0b, 4	; 11
 54a:	ce 01       	movw	r24, r28
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <main+0x326>
			_delay_ms(5);
			pins = ~PINS_INP;
 550:	33 b1       	in	r19, 0x03	; 3
 552:	30 95       	com	r19
			SBO(TIKB_2_Y2);
 554:	5c 9a       	sbi	0x0b, 4	; 11
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	ef e1       	ldi	r30, 0x1F	; 31
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	10 cf       	rjmp	.-480    	; 0x37e <main+0x158>
#if defined TI_SCAN_DBG
			print("2_Y2="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ",KI83DEC")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y3;
 55e:	aa b8       	out	0x0a, r10	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y3;
 560:	8b b1       	in	r24, 0x0b	; 11
 562:	8f 69       	ori	r24, 0x9F	; 159
 564:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y3);
 566:	5d 98       	cbi	0x0b, 5	; 11
 568:	ce 01       	movw	r24, r28
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <main+0x344>
			_delay_ms(5);
			pins = ~PINS_INP;
 56e:	33 b1       	in	r19, 0x03	; 3
 570:	30 95       	com	r19
			SBO(TIKB_2_Y3);
 572:	5d 9a       	sbi	0x0b, 5	; 11
 574:	91 e0       	ldi	r25, 0x01	; 1
 576:	e8 e2       	ldi	r30, 0x28	; 40
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	0a cf       	rjmp	.-492    	; 0x390 <main+0x16a>
 57c:	05 e3       	ldi	r16, 0x35	; 53
 57e:	10 e0       	ldi	r17, 0x00	; 0
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	93 cf       	rjmp	.-218    	; 0x4aa <main+0x284>

00000584 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();	// enable USB
 58a:	80 ea       	ldi	r24, 0xA0	; 160
 58c:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 590:	82 e1       	ldi	r24, 0x12	; 18
 592:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 594:	09 b4       	in	r0, 0x29	; 41
 596:	00 fe       	sbrs	r0, 0
 598:	fd cf       	rjmp	.-6      	; 0x594 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 59a:	80 e9       	ldi	r24, 0x90	; 144
 59c:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 5a0:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 5a4:	10 92 f1 01 	sts	0x01F1, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 5a8:	8c e0       	ldi	r24, 0x0C	; 12
 5aa:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 5ae:	78 94       	sei
}
 5b0:	08 95       	ret

000005b2 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 5b2:	80 91 f1 01 	lds	r24, 0x01F1
}
 5b6:	08 95       	ret

000005b8 <usb_keyboard_send>:
// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
	uint8_t i, intr_state, timeout;

	if (!usb_configuration) return -1;
 5b8:	80 91 f1 01 	lds	r24, 0x01F1
 5bc:	88 23       	and	r24, r24
 5be:	09 f4       	brne	.+2      	; 0x5c2 <usb_keyboard_send+0xa>
 5c0:	41 c0       	rjmp	.+130    	; 0x644 <usb_keyboard_send+0x8c>
	intr_state = SREG;
 5c2:	2f b7       	in	r18, 0x3f	; 63
	cli();
 5c4:	f8 94       	cli
	UENUM = KEYBOARD_ENDPOINT;
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	80 93 e9 00 	sts	0x00E9, r24
	timeout = UDFNUML + 50;
 5cc:	90 91 e4 00 	lds	r25, 0x00E4
 5d0:	9e 5c       	subi	r25, 0xCE	; 206
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = KEYBOARD_ENDPOINT;
 5d2:	33 e0       	ldi	r19, 0x03	; 3
	cli();
	UENUM = KEYBOARD_ENDPOINT;
	timeout = UDFNUML + 50;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 5d4:	80 91 e8 00 	lds	r24, 0x00E8
 5d8:	85 fd       	sbrc	r24, 5
 5da:	0e c0       	rjmp	.+28     	; 0x5f8 <usb_keyboard_send+0x40>
		SREG = intr_state;
 5dc:	2f bf       	out	0x3f, r18	; 63
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 5de:	80 91 f1 01 	lds	r24, 0x01F1
 5e2:	88 23       	and	r24, r24
 5e4:	79 f1       	breq	.+94     	; 0x644 <usb_keyboard_send+0x8c>
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
 5e6:	80 91 e4 00 	lds	r24, 0x00E4
 5ea:	89 17       	cp	r24, r25
 5ec:	59 f1       	breq	.+86     	; 0x644 <usb_keyboard_send+0x8c>
		// get ready to try checking again
		intr_state = SREG;
 5ee:	2f b7       	in	r18, 0x3f	; 63
		cli();
 5f0:	f8 94       	cli
		UENUM = KEYBOARD_ENDPOINT;
 5f2:	30 93 e9 00 	sts	0x00E9, r19
 5f6:	ee cf       	rjmp	.-36     	; 0x5d4 <usb_keyboard_send+0x1c>
	}
	UEDATX = keyboard_modifier_keys;
 5f8:	80 91 e9 01 	lds	r24, 0x01E9
 5fc:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
 600:	10 92 f1 00 	sts	0x00F1, r1
	for (i=0; i<6; i++) {
		UEDATX = keyboard_keys[i];
 604:	80 91 ea 01 	lds	r24, 0x01EA
 608:	80 93 f1 00 	sts	0x00F1, r24
 60c:	80 91 eb 01 	lds	r24, 0x01EB
 610:	80 93 f1 00 	sts	0x00F1, r24
 614:	80 91 ec 01 	lds	r24, 0x01EC
 618:	80 93 f1 00 	sts	0x00F1, r24
 61c:	80 91 ed 01 	lds	r24, 0x01ED
 620:	80 93 f1 00 	sts	0x00F1, r24
 624:	80 91 ee 01 	lds	r24, 0x01EE
 628:	80 93 f1 00 	sts	0x00F1, r24
 62c:	80 91 ef 01 	lds	r24, 0x01EF
 630:	80 93 f1 00 	sts	0x00F1, r24
	}
	UEINTX = 0x3A;
 634:	8a e3       	ldi	r24, 0x3A	; 58
 636:	80 93 e8 00 	sts	0x00E8, r24
	keyboard_idle_count = 0;
 63a:	10 92 f2 01 	sts	0x01F2, r1
	SREG = intr_state;
 63e:	2f bf       	out	0x3f, r18	; 63
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	08 95       	ret
	return 0;
 644:	8f ef       	ldi	r24, 0xFF	; 255
}
 646:	08 95       	ret

00000648 <usb_keyboard_press>:
// perform a single keystroke
int8_t usb_keyboard_press(uint8_t key, uint8_t modifier)
{
	int8_t r;

	keyboard_modifier_keys = modifier;
 648:	60 93 e9 01 	sts	0x01E9, r22
	keyboard_keys[0] = key;
 64c:	80 93 ea 01 	sts	0x01EA, r24
	r = usb_keyboard_send();
 650:	b3 df       	rcall	.-154    	; 0x5b8 <usb_keyboard_send>
	if (r) return r;
 652:	88 23       	and	r24, r24
 654:	29 f4       	brne	.+10     	; 0x660 <usb_keyboard_press+0x18>
	keyboard_modifier_keys = 0;
 656:	10 92 e9 01 	sts	0x01E9, r1
	keyboard_keys[0] = 0;
 65a:	10 92 ea 01 	sts	0x01EA, r1
	return usb_keyboard_send();
 65e:	ac cf       	rjmp	.-168    	; 0x5b8 <usb_keyboard_send>
}
 660:	08 95       	ret

00000662 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	11 24       	eor	r1, r1
 66c:	2f 93       	push	r18
 66e:	8f 93       	push	r24
 670:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
 672:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 676:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 67a:	98 2f       	mov	r25, r24
 67c:	83 ff       	sbrs	r24, 3
 67e:	0f c0       	rjmp	.+30     	; 0x69e <__vector_10+0x3c>
		UENUM = 0;
 680:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 68a:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 68e:	82 e2       	ldi	r24, 0x22	; 34
 690:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 694:	88 e0       	ldi	r24, 0x08	; 8
 696:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 69a:	10 92 f1 01 	sts	0x01F1, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 69e:	92 ff       	sbrs	r25, 2
 6a0:	44 c0       	rjmp	.+136    	; 0x72a <__vector_10+0xc8>
 6a2:	80 91 f1 01 	lds	r24, 0x01F1
 6a6:	88 23       	and	r24, r24
 6a8:	09 f4       	brne	.+2      	; 0x6ac <__vector_10+0x4a>
 6aa:	3f c0       	rjmp	.+126    	; 0x72a <__vector_10+0xc8>
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 6ac:	20 91 e2 01 	lds	r18, 0x01E2
 6b0:	22 23       	and	r18, r18
 6b2:	d9 f1       	breq	.+118    	; 0x72a <__vector_10+0xc8>
 6b4:	80 91 f3 01 	lds	r24, 0x01F3
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	80 93 f3 01 	sts	0x01F3, r24
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	83 70       	andi	r24, 0x03	; 3
 6c2:	90 70       	andi	r25, 0x00	; 0
 6c4:	89 2b       	or	r24, r25
 6c6:	89 f5       	brne	.+98     	; 0x72a <__vector_10+0xc8>
			UENUM = KEYBOARD_ENDPOINT;
 6c8:	83 e0       	ldi	r24, 0x03	; 3
 6ca:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
 6ce:	80 91 e8 00 	lds	r24, 0x00E8
 6d2:	85 ff       	sbrs	r24, 5
 6d4:	2a c0       	rjmp	.+84     	; 0x72a <__vector_10+0xc8>
				keyboard_idle_count++;
 6d6:	80 91 f2 01 	lds	r24, 0x01F2
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	80 93 f2 01 	sts	0x01F2, r24
				if (keyboard_idle_count == keyboard_idle_config) {
 6e0:	82 17       	cp	r24, r18
 6e2:	19 f5       	brne	.+70     	; 0x72a <__vector_10+0xc8>
					keyboard_idle_count = 0;
 6e4:	10 92 f2 01 	sts	0x01F2, r1
					UEDATX = keyboard_modifier_keys;
 6e8:	80 91 e9 01 	lds	r24, 0x01E9
 6ec:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 6f0:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 6f4:	80 91 ea 01 	lds	r24, 0x01EA
 6f8:	80 93 f1 00 	sts	0x00F1, r24
 6fc:	80 91 eb 01 	lds	r24, 0x01EB
 700:	80 93 f1 00 	sts	0x00F1, r24
 704:	80 91 ec 01 	lds	r24, 0x01EC
 708:	80 93 f1 00 	sts	0x00F1, r24
 70c:	80 91 ed 01 	lds	r24, 0x01ED
 710:	80 93 f1 00 	sts	0x00F1, r24
 714:	80 91 ee 01 	lds	r24, 0x01EE
 718:	80 93 f1 00 	sts	0x00F1, r24
 71c:	80 91 ef 01 	lds	r24, 0x01EF
 720:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
 724:	8a e3       	ldi	r24, 0x3A	; 58
 726:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 72a:	9f 91       	pop	r25
 72c:	8f 91       	pop	r24
 72e:	2f 91       	pop	r18
 730:	0f 90       	pop	r0
 732:	0f be       	out	0x3f, r0	; 63
 734:	0f 90       	pop	r0
 736:	1f 90       	pop	r1
 738:	18 95       	reti

0000073a <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 73a:	1f 92       	push	r1
 73c:	0f 92       	push	r0
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	0f 92       	push	r0
 742:	11 24       	eor	r1, r1
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 760:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 764:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 768:	83 ff       	sbrs	r24, 3
 76a:	5b c1       	rjmp	.+694    	; 0xa22 <__vector_11+0x2e8>
                bmRequestType = UEDATX;
 76c:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 770:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 774:	80 91 f1 00 	lds	r24, 0x00F1
 778:	68 2f       	mov	r22, r24
 77a:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 77c:	20 91 f1 00 	lds	r18, 0x00F1
 780:	92 2f       	mov	r25, r18
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	68 2b       	or	r22, r24
 786:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 788:	80 91 f1 00 	lds	r24, 0x00F1
 78c:	a8 2f       	mov	r26, r24
 78e:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 790:	20 91 f1 00 	lds	r18, 0x00F1
 794:	92 2f       	mov	r25, r18
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	a8 2b       	or	r26, r24
 79a:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 79c:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 7a0:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 7a4:	82 ef       	ldi	r24, 0xF2	; 242
 7a6:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 7aa:	36 30       	cpi	r19, 0x06	; 6
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <__vector_11+0x76>
 7ae:	5a c0       	rjmp	.+180    	; 0x864 <__vector_11+0x12a>
 7b0:	23 eb       	ldi	r18, 0xB3	; 179
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	a9 01       	movw	r20, r18
 7b6:	45 50       	subi	r20, 0x05	; 5
 7b8:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 7ba:	f9 01       	movw	r30, r18
 7bc:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 7be:	85 91       	lpm	r24, Z+
 7c0:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 7c2:	86 17       	cp	r24, r22
 7c4:	97 07       	cpc	r25, r23
 7c6:	01 f5       	brne	.+64     	; 0x808 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 7c8:	fa 01       	movw	r30, r20
 7ca:	85 91       	lpm	r24, Z+
 7cc:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 7ce:	8a 17       	cp	r24, r26
 7d0:	9b 07       	cpc	r25, r27
 7d2:	d1 f4       	brne	.+52     	; 0x808 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 7d4:	9a 01       	movw	r18, r20
 7d6:	2e 5f       	subi	r18, 0xFE	; 254
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 7da:	f9 01       	movw	r30, r18
 7dc:	65 91       	lpm	r22, Z+
 7de:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 7e0:	2e 5f       	subi	r18, 0xFE	; 254
 7e2:	3f 4f       	sbci	r19, 0xFF	; 255
 7e4:	f9 01       	movw	r30, r18
 7e6:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 7e8:	21 2f       	mov	r18, r17
 7ea:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 7ec:	90 2f       	mov	r25, r16
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	28 2b       	or	r18, r24
 7f2:	39 2b       	or	r19, r25
 7f4:	2f 3f       	cpi	r18, 0xFF	; 255
 7f6:	31 05       	cpc	r19, r1
 7f8:	19 f0       	breq	.+6      	; 0x800 <__vector_11+0xc6>
 7fa:	10 f0       	brcs	.+4      	; 0x800 <__vector_11+0xc6>
 7fc:	2f ef       	ldi	r18, 0xFF	; 255
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	24 17       	cp	r18, r20
 802:	58 f4       	brcc	.+22     	; 0x81a <__vector_11+0xe0>
 804:	42 2f       	mov	r20, r18
 806:	09 c0       	rjmp	.+18     	; 0x81a <__vector_11+0xe0>
 808:	29 5f       	subi	r18, 0xF9	; 249
 80a:	3f 4f       	sbci	r19, 0xFF	; 255
 80c:	49 5f       	subi	r20, 0xF9	; 249
 80e:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	24 3e       	cpi	r18, 0xE4	; 228
 814:	3f 07       	cpc	r19, r31
 816:	89 f6       	brne	.-94     	; 0x7ba <__vector_11+0x80>
 818:	04 c1       	rjmp	.+520    	; 0xa22 <__vector_11+0x2e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 81a:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 81c:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	c9 01       	movw	r24, r18
 826:	85 70       	andi	r24, 0x05	; 5
 828:	90 70       	andi	r25, 0x00	; 0
 82a:	89 2b       	or	r24, r25
 82c:	b9 f3       	breq	.-18     	; 0x81c <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
 82e:	22 fd       	sbrc	r18, 2
 830:	fb c0       	rjmp	.+502    	; 0xa28 <__vector_11+0x2ee>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 832:	34 2f       	mov	r19, r20
 834:	41 32       	cpi	r20, 0x21	; 33
 836:	08 f0       	brcs	.+2      	; 0x83a <__vector_11+0x100>
 838:	30 e2       	ldi	r19, 0x20	; 32
 83a:	23 2f       	mov	r18, r19
 83c:	cb 01       	movw	r24, r22
 83e:	06 c0       	rjmp	.+12     	; 0x84c <__vector_11+0x112>
				for (i = n; i; i--) {
 840:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 842:	01 96       	adiw	r24, 0x01	; 1
 844:	e4 91       	lpm	r30, Z+
 846:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 84a:	21 50       	subi	r18, 0x01	; 1
 84c:	22 23       	and	r18, r18
 84e:	c1 f7       	brne	.-16     	; 0x840 <__vector_11+0x106>
 850:	63 0f       	add	r22, r19
 852:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 854:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 856:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 85a:	44 23       	and	r20, r20
 85c:	f9 f6       	brne	.-66     	; 0x81c <__vector_11+0xe2>
 85e:	30 32       	cpi	r19, 0x20	; 32
 860:	e9 f2       	breq	.-70     	; 0x81c <__vector_11+0xe2>
 862:	e2 c0       	rjmp	.+452    	; 0xa28 <__vector_11+0x2ee>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 864:	35 30       	cpi	r19, 0x05	; 5
 866:	61 f4       	brne	.+24     	; 0x880 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 868:	8e ef       	ldi	r24, 0xFE	; 254
 86a:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 86e:	80 91 e8 00 	lds	r24, 0x00E8
 872:	80 ff       	sbrs	r24, 0
 874:	fc cf       	rjmp	.-8      	; 0x86e <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 876:	86 2f       	mov	r24, r22
 878:	80 68       	ori	r24, 0x80	; 128
 87a:	80 93 e3 00 	sts	0x00E3, r24
 87e:	d4 c0       	rjmp	.+424    	; 0xa28 <__vector_11+0x2ee>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 880:	39 30       	cpi	r19, 0x09	; 9
 882:	31 f5       	brne	.+76     	; 0x8d0 <__vector_11+0x196>
 884:	44 23       	and	r20, r20
 886:	09 f0       	breq	.+2      	; 0x88a <__vector_11+0x150>
 888:	71 c0       	rjmp	.+226    	; 0x96c <__vector_11+0x232>
			usb_configuration = wValue;
 88a:	60 93 f1 01 	sts	0x01F1, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 88e:	8e ef       	ldi	r24, 0xFE	; 254
 890:	80 93 e8 00 	sts	0x00E8, r24
 894:	8d ed       	ldi	r24, 0xDD	; 221
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 89a:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 89e:	fc 01       	movw	r30, r24
 8a0:	01 96       	adiw	r24, 0x01	; 1
 8a2:	e4 91       	lpm	r30, Z+
				UECONX = en;
 8a4:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 8a8:	ee 23       	and	r30, r30
 8aa:	69 f0       	breq	.+26     	; 0x8c6 <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
 8ac:	ac 01       	movw	r20, r24
 8ae:	4f 5f       	subi	r20, 0xFF	; 255
 8b0:	5f 4f       	sbci	r21, 0xFF	; 255
 8b2:	fc 01       	movw	r30, r24
 8b4:	84 91       	lpm	r24, Z+
 8b6:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 8ba:	ca 01       	movw	r24, r20
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	fa 01       	movw	r30, r20
 8c0:	34 91       	lpm	r19, Z+
 8c2:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 8c6:	2f 5f       	subi	r18, 0xFF	; 255
 8c8:	25 30       	cpi	r18, 0x05	; 5
 8ca:	39 f7       	brne	.-50     	; 0x89a <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 8cc:	8e e1       	ldi	r24, 0x1E	; 30
 8ce:	49 c0       	rjmp	.+146    	; 0x962 <__vector_11+0x228>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 8d0:	38 30       	cpi	r19, 0x08	; 8
 8d2:	51 f4       	brne	.+20     	; 0x8e8 <__vector_11+0x1ae>
 8d4:	40 38       	cpi	r20, 0x80	; 128
 8d6:	09 f0       	breq	.+2      	; 0x8da <__vector_11+0x1a0>
 8d8:	49 c0       	rjmp	.+146    	; 0x96c <__vector_11+0x232>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8da:	80 91 e8 00 	lds	r24, 0x00E8
 8de:	80 ff       	sbrs	r24, 0
 8e0:	fc cf       	rjmp	.-8      	; 0x8da <__vector_11+0x1a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 8e2:	80 91 f1 01 	lds	r24, 0x01F1
 8e6:	7b c0       	rjmp	.+246    	; 0x9de <__vector_11+0x2a4>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 8e8:	33 23       	and	r19, r19
 8ea:	d1 f4       	brne	.+52     	; 0x920 <__vector_11+0x1e6>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8ec:	80 91 e8 00 	lds	r24, 0x00E8
 8f0:	80 ff       	sbrs	r24, 0
 8f2:	fc cf       	rjmp	.-8      	; 0x8ec <__vector_11+0x1b2>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 8f4:	42 38       	cpi	r20, 0x82	; 130
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__vector_11+0x1c2>
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	0d c0       	rjmp	.+26     	; 0x916 <__vector_11+0x1dc>
				UENUM = wIndex;
 8fc:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 900:	80 91 eb 00 	lds	r24, 0x00EB
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	25 e0       	ldi	r18, 0x05	; 5
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	2a 95       	dec	r18
 90e:	e1 f7       	brne	.-8      	; 0x908 <__vector_11+0x1ce>
 910:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 912:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 916:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 91a:	10 92 f1 00 	sts	0x00F1, r1
 91e:	7d c0       	rjmp	.+250    	; 0xa1a <__vector_11+0x2e0>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 920:	31 30       	cpi	r19, 0x01	; 1
 922:	11 f0       	breq	.+4      	; 0x928 <__vector_11+0x1ee>
 924:	33 30       	cpi	r19, 0x03	; 3
 926:	11 f5       	brne	.+68     	; 0x96c <__vector_11+0x232>
 928:	42 30       	cpi	r20, 0x02	; 2
 92a:	01 f5       	brne	.+64     	; 0x96c <__vector_11+0x232>
 92c:	61 15       	cp	r22, r1
 92e:	71 05       	cpc	r23, r1
 930:	e9 f4       	brne	.+58     	; 0x96c <__vector_11+0x232>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 932:	2a 2f       	mov	r18, r26
 934:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 936:	82 2f       	mov	r24, r18
 938:	81 50       	subi	r24, 0x01	; 1
 93a:	84 30       	cpi	r24, 0x04	; 4
 93c:	b8 f4       	brcc	.+46     	; 0x96c <__vector_11+0x232>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 93e:	8e ef       	ldi	r24, 0xFE	; 254
 940:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 944:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 948:	33 30       	cpi	r19, 0x03	; 3
 94a:	09 f4       	brne	.+2      	; 0x94e <__vector_11+0x214>
 94c:	6a c0       	rjmp	.+212    	; 0xa22 <__vector_11+0x2e8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 94e:	89 e1       	ldi	r24, 0x19	; 25
 950:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <__vector_11+0x224>
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	2a 95       	dec	r18
 960:	e2 f7       	brpl	.-8      	; 0x95a <__vector_11+0x220>
 962:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 966:	10 92 ea 00 	sts	0x00EA, r1
 96a:	5e c0       	rjmp	.+188    	; 0xa28 <__vector_11+0x2ee>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
 96c:	ab 2b       	or	r26, r27
 96e:	09 f0       	breq	.+2      	; 0x972 <__vector_11+0x238>
 970:	58 c0       	rjmp	.+176    	; 0xa22 <__vector_11+0x2e8>
			if (bmRequestType == 0xA1) {
 972:	41 3a       	cpi	r20, 0xA1	; 161
 974:	b9 f5       	brne	.+110    	; 0x9e4 <__vector_11+0x2aa>
				if (bRequest == HID_GET_REPORT) {
 976:	31 30       	cpi	r19, 0x01	; 1
 978:	09 f5       	brne	.+66     	; 0x9bc <__vector_11+0x282>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 97a:	80 91 e8 00 	lds	r24, 0x00E8
 97e:	80 ff       	sbrs	r24, 0
 980:	fc cf       	rjmp	.-8      	; 0x97a <__vector_11+0x240>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
 982:	80 91 e9 01 	lds	r24, 0x01E9
 986:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 98a:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 98e:	80 91 ea 01 	lds	r24, 0x01EA
 992:	80 93 f1 00 	sts	0x00F1, r24
 996:	80 91 eb 01 	lds	r24, 0x01EB
 99a:	80 93 f1 00 	sts	0x00F1, r24
 99e:	80 91 ec 01 	lds	r24, 0x01EC
 9a2:	80 93 f1 00 	sts	0x00F1, r24
 9a6:	80 91 ed 01 	lds	r24, 0x01ED
 9aa:	80 93 f1 00 	sts	0x00F1, r24
 9ae:	80 91 ee 01 	lds	r24, 0x01EE
 9b2:	80 93 f1 00 	sts	0x00F1, r24
 9b6:	80 91 ef 01 	lds	r24, 0x01EF
 9ba:	11 c0       	rjmp	.+34     	; 0x9de <__vector_11+0x2a4>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
 9bc:	32 30       	cpi	r19, 0x02	; 2
 9be:	39 f4       	brne	.+14     	; 0x9ce <__vector_11+0x294>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 9c0:	80 91 e8 00 	lds	r24, 0x00E8
 9c4:	80 ff       	sbrs	r24, 0
 9c6:	fc cf       	rjmp	.-8      	; 0x9c0 <__vector_11+0x286>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
 9c8:	80 91 e2 01 	lds	r24, 0x01E2
 9cc:	08 c0       	rjmp	.+16     	; 0x9de <__vector_11+0x2a4>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 9ce:	33 30       	cpi	r19, 0x03	; 3
 9d0:	41 f5       	brne	.+80     	; 0xa22 <__vector_11+0x2e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 9d2:	80 91 e8 00 	lds	r24, 0x00E8
 9d6:	80 ff       	sbrs	r24, 0
 9d8:	fc cf       	rjmp	.-8      	; 0x9d2 <__vector_11+0x298>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
 9da:	80 91 e3 01 	lds	r24, 0x01E3
 9de:	80 93 f1 00 	sts	0x00F1, r24
 9e2:	1b c0       	rjmp	.+54     	; 0xa1a <__vector_11+0x2e0>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 9e4:	41 32       	cpi	r20, 0x21	; 33
 9e6:	e9 f4       	brne	.+58     	; 0xa22 <__vector_11+0x2e8>
				if (bRequest == HID_SET_REPORT) {
 9e8:	39 30       	cpi	r19, 0x09	; 9
 9ea:	61 f4       	brne	.+24     	; 0xa04 <__vector_11+0x2ca>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 9ec:	80 91 e8 00 	lds	r24, 0x00E8
 9f0:	82 ff       	sbrs	r24, 2
 9f2:	fc cf       	rjmp	.-8      	; 0x9ec <__vector_11+0x2b2>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
 9f4:	80 91 f1 00 	lds	r24, 0x00F1
 9f8:	80 93 f0 01 	sts	0x01F0, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 9fc:	8b ef       	ldi	r24, 0xFB	; 251
 9fe:	80 93 e8 00 	sts	0x00E8, r24
 a02:	0b c0       	rjmp	.+22     	; 0xa1a <__vector_11+0x2e0>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
 a04:	3a 30       	cpi	r19, 0x0A	; 10
 a06:	29 f4       	brne	.+10     	; 0xa12 <__vector_11+0x2d8>
					keyboard_idle_config = (wValue >> 8);
 a08:	70 93 e2 01 	sts	0x01E2, r23
					keyboard_idle_count = 0;
 a0c:	10 92 f2 01 	sts	0x01F2, r1
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <__vector_11+0x2e0>
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
 a12:	3b 30       	cpi	r19, 0x0B	; 11
 a14:	31 f4       	brne	.+12     	; 0xa22 <__vector_11+0x2e8>
					keyboard_protocol = wValue;
 a16:	60 93 e3 01 	sts	0x01E3, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 a1a:	8e ef       	ldi	r24, 0xFE	; 254
 a1c:	80 93 e8 00 	sts	0x00E8, r24
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <__vector_11+0x2ee>
					return;
				}
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 a22:	81 e2       	ldi	r24, 0x21	; 33
 a24:	80 93 eb 00 	sts	0x00EB, r24
}
 a28:	ff 91       	pop	r31
 a2a:	ef 91       	pop	r30
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	9f 91       	pop	r25
 a32:	8f 91       	pop	r24
 a34:	7f 91       	pop	r23
 a36:	6f 91       	pop	r22
 a38:	5f 91       	pop	r21
 a3a:	4f 91       	pop	r20
 a3c:	3f 91       	pop	r19
 a3e:	2f 91       	pop	r18
 a40:	1f 91       	pop	r17
 a42:	0f 91       	pop	r16
 a44:	0f 90       	pop	r0
 a46:	0f be       	out	0x3f, r0	; 63
 a48:	0f 90       	pop	r0
 a4a:	1f 90       	pop	r1
 a4c:	18 95       	reti

00000a4e <_exit>:
 a4e:	f8 94       	cli

00000a50 <__stop_program>:
 a50:	ff cf       	rjmp	.-2      	; 0xa50 <__stop_program>
