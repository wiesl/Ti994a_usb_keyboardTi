
Ti994a_usb_keyboard_dbg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  00000c80  00000d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008001e4  008001e4  00000df8  2**0
                  ALLOC
  3 .debug_aranges 000000b8  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000156  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fcf  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000431  00000000  00000000  00001fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ffe  00000000  00000000  00002406  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000499  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e58  00000000  00000000  000039ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00004805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


// immediately transmit any buffered output.
void usb_debug_flush_output(void)
{
   0:	fe c0       	rjmp	.+508    	; 0x1fe <__ctors_end>
	phex1(c >> 4);
	phex1(c & 15);
}

void phex16(unsigned int i)
{
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	cc c3       	rjmp	.+1944   	; 0x7c2 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c4       	rjmp	.+2200   	; 0x8c6 <__vector_11>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ec c0       	rjmp	.+472    	; 0x236 <__vector_23>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__c.1442>:
  ac:	4e 6f 20 55 53 42 20 6b 65 79 21 0a 00              No USB key!..

000000b9 <__c.1440>:
  b9:	0a 00                                               ..

000000bb <__c.1438>:
  bb:	20 20 53 70 65 65 64 3a 20 30 78 00                   Speed: 0x.

000000c7 <__c.1436>:
  c7:	20 20 44 65 6c 61 79 3a 20 30 78 00                   Delay: 0x.

000000d3 <__c.1434>:
  d3:	20 20 55 73 62 4b 65 79 3a 20 30 78 00                UsbKey: 0x.

000000e0 <__c.1432>:
  e0:	55 73 62 4d 6f 64 3a 20 30 78 00                    UsbMod: 0x.

000000eb <descriptor_list>:
  eb:	00 01 00 00 32 01 12 00 02 00 00 44 01 3b 00 22     ....2......D.;."
  fb:	00 00 7f 01 3f 00 21 00 00 56 01 09 00 22 01 00     ....?.!..V..."..
 10b:	be 01 15 00 21 01 00 6f 01 09 00 03 00 00 d3 01     ....!..o........
 11b:	04 01 03 09 04 d7 01 10 02 03 09 04 e9 01 12        ...............

0000012a <endpoint_config_table>:
 12a:	00 00 01 c1 06 01 c1 26                             .......&

00000132 <device_descriptor>:
 132:	12 01 00 02 00 00 00 20 c0 16 7d 04 00 01 01 02     ....... ..}.....
 142:	00 01                                               ..

00000144 <config1_descriptor>:
 144:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
 154:	01 00 09 21 11 01 00 01 22 3f 00 07 05 83 03 08     ...!...."?......
 164:	00 01 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
 174:	01 22 15 00 07 05 84 03 20 00 01                    ."...... ..

0000017f <keyboard_hid_report_desc>:
 17f:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
 18f:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 19f:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 1af:	75 08 15 00 25 68 05 07 19 00 29 68 81 00 c0        u...%h....)h...

000001be <debug_hid_report_desc>:
 1be:	06 31 ff 09 74 a1 53 75 08 15 00 26 ff 00 95 20     .1..t.Su...&... 
 1ce:	09 75 81 02 c0                                      .u...

000001d3 <string0>:
 1d3:	04 03 09 04                                         ....

000001d7 <string1>:
 1d7:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
 1e7:	00 00                                               ..

000001e9 <string2>:
 1e9:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
 1f9:	64 00 00 00 00                                      d....

000001fe <__ctors_end>:
 1fe:	11 24       	eor	r1, r1
 200:	1f be       	out	0x3f, r1	; 63
 202:	cf ef       	ldi	r28, 0xFF	; 255
 204:	da e0       	ldi	r29, 0x0A	; 10
 206:	de bf       	out	0x3e, r29	; 62
 208:	cd bf       	out	0x3d, r28	; 61

0000020a <__do_copy_data>:
 20a:	11 e0       	ldi	r17, 0x01	; 1
 20c:	a0 e0       	ldi	r26, 0x00	; 0
 20e:	b1 e0       	ldi	r27, 0x01	; 1
 210:	e0 e8       	ldi	r30, 0x80	; 128
 212:	fc e0       	ldi	r31, 0x0C	; 12
 214:	02 c0       	rjmp	.+4      	; 0x21a <.do_copy_data_start>

00000216 <.do_copy_data_loop>:
 216:	05 90       	lpm	r0, Z+
 218:	0d 92       	st	X+, r0

0000021a <.do_copy_data_start>:
 21a:	a4 3e       	cpi	r26, 0xE4	; 228
 21c:	b1 07       	cpc	r27, r17
 21e:	d9 f7       	brne	.-10     	; 0x216 <.do_copy_data_loop>

00000220 <__do_clear_bss>:
 220:	11 e0       	ldi	r17, 0x01	; 1
 222:	a4 ee       	ldi	r26, 0xE4	; 228
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
 228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
 22a:	a6 3f       	cpi	r26, 0xF6	; 246
 22c:	b1 07       	cpc	r27, r17
 22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>
 230:	39 d0       	rcall	.+114    	; 0x2a4 <main>
 232:	24 c5       	rjmp	.+2632   	; 0xc7c <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <__vector_23>:
// This interrupt routine is run approx 61 times per second.
// A very simple inactivity timeout is implemented, where the
// LED is blinking.

ISR(TIMER0_OVF_vect)
{
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
	uTsek++;
 244:	80 91 e4 01 	lds	r24, 0x01E4
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 e4 01 	sts	0x01E4, r24
	bTsek = 0;
 24e:	10 92 e5 01 	sts	0x01E5, r1
	if (uTsek >= 6)
 252:	86 30       	cpi	r24, 0x06	; 6
 254:	28 f0       	brcs	.+10     	; 0x260 <__vector_23+0x2a>
	{
		uTsek = 0;
 256:	10 92 e4 01 	sts	0x01E4, r1
		bTsek = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 e5 01 	sts	0x01E5, r24
	}
	
	idle_count++;
 260:	80 91 e6 01 	lds	r24, 0x01E6
 264:	90 91 e7 01 	lds	r25, 0x01E7
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 e7 01 	sts	0x01E7, r25
 26e:	80 93 e6 01 	sts	0x01E6, r24
	if (idle_count > 61 * 1)
 272:	ce 97       	sbiw	r24, 0x3e	; 62
 274:	80 f0       	brcs	.+32     	; 0x296 <__vector_23+0x60>
	{
		idle_count = 0;
 276:	10 92 e7 01 	sts	0x01E7, r1
 27a:	10 92 e6 01 	sts	0x01E6, r1
		
		if (Pin_D4_Led)
 27e:	80 91 e8 01 	lds	r24, 0x01E8
 282:	88 23       	and	r24, r24
 284:	21 f0       	breq	.+8      	; 0x28e <__vector_23+0x58>
		{
			Pin_D4_Led = 0;
 286:	10 92 e8 01 	sts	0x01E8, r1
			LED_ON;
 28a:	5e 9a       	sbi	0x0b, 6	; 11
 28c:	04 c0       	rjmp	.+8      	; 0x296 <__vector_23+0x60>
//			print("Led ON\n");
		}
		else
		{
			Pin_D4_Led = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 e8 01 	sts	0x01E8, r24
			LED_OFF;
 294:	5e 98       	cbi	0x0b, 6	; 11
//			print("Led OFF\n");
		}
//		print("Timer Event :)\n");
//		usb_keyboard_press(KEY_SPACE, 0);
	}
}
 296:	9f 91       	pop	r25
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <main>:
	{'Z', KEY_Z,         0},		//Ti kb
};


int main(void)
{
 2a4:	3f 92       	push	r3
 2a6:	4f 92       	push	r4
 2a8:	5f 92       	push	r5
 2aa:	6f 92       	push	r6
 2ac:	7f 92       	push	r7
 2ae:	8f 92       	push	r8
 2b0:	9f 92       	push	r9
 2b2:	af 92       	push	r10
 2b4:	bf 92       	push	r11
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
	
	uchar arKbDelay = 0;	// Auto repeat keyboard delay
	uchar arKbSpeed = 0;	// Auto repeat keyboard speed
	
	// set for 16 MHz clock, and make sure all outputs are off 
	CPU_PRESCALE(0);
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	80 93 61 00 	sts	0x0061, r24
 2cc:	10 92 61 00 	sts	0x0061, r1

	DDR_OUT   = 0x40;	//All Input, D6 output (LED)
 2d0:	80 e4       	ldi	r24, 0x40	; 64
 2d2:	8a b9       	out	0x0a, r24	; 10
	DDR_INP   = 0x00;	//All Input
 2d4:	14 b8       	out	0x04, r1	; 4
	PORT_INP |= 0xFF;	//And Pull-up resistors
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	85 b9       	out	0x05, r24	; 5

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	usb_init();
 2dc:	bd d1       	rcall	.+890    	; 0x658 <usb_init>
	while (!usb_configured()) /* wait */ ;
 2de:	d3 d1       	rcall	.+934    	; 0x686 <usb_configured>
 2e0:	88 23       	and	r24, r24
 2e2:	e9 f3       	breq	.-6      	; 0x2de <main+0x3a>
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e8:	20 e9       	ldi	r18, 0x90	; 144
 2ea:	31 e0       	ldi	r19, 0x01	; 1
 2ec:	f9 01       	movw	r30, r18
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <main+0x48>
	
	// Configure timer 0 to generate a timer overflow interrupt every
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
 2f6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	80 93 6e 00 	sts	0x006E, r24
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	ff 24       	eor	r15, r15
 308:	ee 24       	eor	r14, r14
 * no open collector outputs. To overcome this problem
 * only one pin is used as an output pin and all others are
 * switched to input.
 */

		DDR_OUT = LED_OUT | TIKB_P_5;
 30a:	20 ec       	ldi	r18, 0xC0	; 192
 30c:	92 2e       	mov	r9, r18
 30e:	c0 e2       	ldi	r28, 0x20	; 32
 310:	de e4       	ldi	r29, 0x4E	; 78
			h_caps = caps;
			print("CAPS\n");
		}
#endif

		DDR_OUT = LED_OUT | TIKB_2_Y0;
 312:	94 e4       	ldi	r25, 0x44	; 68
 314:	c9 2e       	mov	r12, r25
		PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y0;
		SBZ(TIKB_2_Y0);
		_delay_ms(5);
		pins  = PINS_INP;
		SBO(TIKB_2_Y0);
		shift = TB(TIKB_INT_8);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	a8 2e       	mov	r10, r24
 31a:	b1 2c       	mov	r11, r1
			print("FCTN\n");
		}
#endif		
		do
		{
			DDR_OUT = LED_OUT | TIKB_1_Y0;
 31c:	01 e4       	ldi	r16, 0x41	; 65
 31e:	80 2e       	mov	r8, r16
			PORT_OUT |= OUT_PULLUP & ~TIKB_1_Y0;
			SBZ(TIKB_1_Y0);
			_delay_ms(5);
			pins = ~PINS_INP; 
			SBO(TIKB_1_Y0);
 320:	77 24       	eor	r7, r7
 322:	73 94       	inc	r7
#if defined TI_SCAN_DBG
			print("1_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "NHY65GTB")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_1_Y1;
 324:	12 e4       	ldi	r17, 0x42	; 66
 326:	61 2e       	mov	r6, r17
#if defined TI_SCAN_DBG
			print("2_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "= \n")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y1;
 328:	b8 e4       	ldi	r27, 0x48	; 72
 32a:	5b 2e       	mov	r5, r27
#if defined TI_SCAN_DBG
			print("2_Y1="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ".LO92SWX")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_2_Y2;
 32c:	a0 e5       	ldi	r26, 0x50	; 80
 32e:	4a 2e       	mov	r4, r26
#if defined TI_SCAN_DBG
			print("2_Y2="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ",KI83DEC")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y3;
 330:	f0 e6       	ldi	r31, 0x60	; 96
 332:	3f 2e       	mov	r3, r31
 334:	03 c0       	rjmp	.+6      	; 0x33c <main+0x98>
	// 256*1024 clock cycles, or approx 61 Hz when using 16 MHz clock
	// This demonstrates how to use interrupts to implement a simple
	// inactivity timeout.
	TCCR0A = 0x00;
	TCCR0B = 0x05;
	TIMSK0 = (1<<TOIE0);
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	ff 24       	eor	r15, r15
 33a:	ee 24       	eor	r14, r14
 * no open collector outputs. To overcome this problem
 * only one pin is used as an output pin and all others are
 * switched to input.
 */

		DDR_OUT = LED_OUT | TIKB_P_5;
 33c:	9a b8       	out	0x0a, r9	; 10
		PORT_OUT |= OUT_PULLUP & ~TIKB_P_5;
 33e:	8b b1       	in	r24, 0x0b	; 11
 340:	8f 63       	ori	r24, 0x3F	; 63
 342:	8b b9       	out	0x0b, r24	; 11
		SBZ(TIKB_P_5);
 344:	5f 98       	cbi	0x0b, 7	; 11
 346:	ce 01       	movw	r24, r28
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <main+0xa4>
		_delay_ms(5);
		pins = PINS_INP;
 34c:	d3 b0       	in	r13, 0x03	; 3
		SBO(TIKB_P_5);
 34e:	5f 9a       	sbi	0x0b, 7	; 11
			h_caps = caps;
			print("CAPS\n");
		}
#endif

		DDR_OUT = LED_OUT | TIKB_2_Y0;
 350:	ca b8       	out	0x0a, r12	; 10
		PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y0;
 352:	8b b1       	in	r24, 0x0b	; 11
 354:	8b 6b       	ori	r24, 0xBB	; 187
 356:	8b b9       	out	0x0b, r24	; 11
		SBZ(TIKB_2_Y0);
 358:	5a 98       	cbi	0x0b, 2	; 11
 35a:	ce 01       	movw	r24, r28
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <main+0xb8>
		_delay_ms(5);
		pins  = PINS_INP;
 360:	83 b1       	in	r24, 0x03	; 3
		SBO(TIKB_2_Y0);
 362:	5a 9a       	sbi	0x0b, 2	; 11
		shift = TB(TIKB_INT_8);
 364:	68 2f       	mov	r22, r24
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	cb 01       	movw	r24, r22
 36a:	e5 e0       	ldi	r30, 0x05	; 5
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	ea 95       	dec	r30
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0xc8>
 374:	8a 25       	eor	r24, r10
 376:	9b 25       	eor	r25, r11
 378:	b8 2f       	mov	r27, r24
 37a:	b1 70       	andi	r27, 0x01	; 1
		ctrl  = TB(TIKB_INT_9);
		fctn  = TB(TIKB_INT_7);
 37c:	cb 01       	movw	r24, r22
 37e:	74 e0       	ldi	r23, 0x04	; 4
 380:	96 95       	lsr	r25
 382:	87 95       	ror	r24
 384:	7a 95       	dec	r23
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0xdc>
 388:	8a 25       	eor	r24, r10
 38a:	9b 25       	eor	r25, r11
 38c:	a8 2f       	mov	r26, r24
 38e:	a1 70       	andi	r26, 0x01	; 1
			print("FCTN\n");
		}
#endif		
		do
		{
			DDR_OUT = LED_OUT | TIKB_1_Y0;
 390:	8a b8       	out	0x0a, r8	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_1_Y0;
 392:	8b b1       	in	r24, 0x0b	; 11
 394:	8e 6b       	ori	r24, 0xBE	; 190
 396:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_1_Y0);
 398:	58 98       	cbi	0x0b, 0	; 11
 39a:	ce 01       	movw	r24, r28
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0xf8>
			_delay_ms(5);
			pins = ~PINS_INP; 
 3a0:	33 b1       	in	r19, 0x03	; 3
 3a2:	30 95       	com	r19
			SBO(TIKB_1_Y0);
 3a4:	58 9a       	sbi	0x0b, 0	; 11
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	e0 e0       	ldi	r30, 0x00	; 0
 3aa:	f1 e0       	ldi	r31, 0x01	; 1
 3ac:	06 c0       	rjmp	.+12     	; 0x3ba <main+0x116>
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
	{
		if (Pins & mask) return *pThisKeys;
 3ae:	89 2f       	mov	r24, r25
 3b0:	83 23       	and	r24, r19
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <main+0x112>
 3b4:	40 c0       	rjmp	.+128    	; 0x436 <main+0x192>
		
		mask <<= 1;
 3b6:	99 0f       	add	r25, r25
		pThisKeys += 1;
 3b8:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 3ba:	20 81       	ld	r18, Z
 3bc:	22 23       	and	r18, r18
 3be:	b9 f7       	brne	.-18     	; 0x3ae <main+0x10a>
 3c0:	fc c0       	rjmp	.+504    	; 0x5ba <main+0x316>
	{
		if (Pins & mask) return *pThisKeys;
 3c2:	89 2f       	mov	r24, r25
 3c4:	83 23       	and	r24, r19
 3c6:	b9 f5       	brne	.+110    	; 0x436 <main+0x192>
		
		mask <<= 1;
 3c8:	99 0f       	add	r25, r25
		pThisKeys += 1;
 3ca:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 3cc:	20 81       	ld	r18, Z
 3ce:	22 23       	and	r18, r18
 3d0:	c1 f7       	brne	.-16     	; 0x3c2 <main+0x11e>
 3d2:	02 c1       	rjmp	.+516    	; 0x5d8 <main+0x334>
	{
		if (Pins & mask) return *pThisKeys;
 3d4:	89 2f       	mov	r24, r25
 3d6:	83 23       	and	r24, r19
 3d8:	71 f5       	brne	.+92     	; 0x436 <main+0x192>
		
		mask <<= 1;
 3da:	99 0f       	add	r25, r25
		pThisKeys += 1;
 3dc:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 3de:	20 81       	ld	r18, Z
 3e0:	22 23       	and	r18, r18
 3e2:	c1 f7       	brne	.-16     	; 0x3d4 <main+0x130>
 3e4:	08 c1       	rjmp	.+528    	; 0x5f6 <main+0x352>
	{
		if (Pins & mask) return *pThisKeys;
 3e6:	89 2f       	mov	r24, r25
 3e8:	83 23       	and	r24, r19
 3ea:	29 f5       	brne	.+74     	; 0x436 <main+0x192>
		
		mask <<= 1;
 3ec:	99 0f       	add	r25, r25
		pThisKeys += 1;
 3ee:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 3f0:	20 81       	ld	r18, Z
 3f2:	22 23       	and	r18, r18
 3f4:	c1 f7       	brne	.-16     	; 0x3e6 <main+0x142>
 3f6:	0e c1       	rjmp	.+540    	; 0x614 <main+0x370>
	{
		if (Pins & mask) return *pThisKeys;
 3f8:	89 2f       	mov	r24, r25
 3fa:	83 23       	and	r24, r19
 3fc:	e1 f4       	brne	.+56     	; 0x436 <main+0x192>
		
		mask <<= 1;
 3fe:	99 0f       	add	r25, r25
		pThisKeys += 1;
 400:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 402:	20 81       	ld	r18, Z
 404:	22 23       	and	r18, r18
 406:	c1 f7       	brne	.-16     	; 0x3f8 <main+0x154>
 408:	14 c1       	rjmp	.+552    	; 0x632 <main+0x38e>
	{
		if (Pins & mask) return *pThisKeys;
 40a:	89 2f       	mov	r24, r25
 40c:	83 23       	and	r24, r19
 40e:	99 f4       	brne	.+38     	; 0x436 <main+0x192>
		
		mask <<= 1;
 410:	99 0f       	add	r25, r25
		pThisKeys += 1;
 412:	31 96       	adiw	r30, 0x01	; 1

static uchar WhatKey(uchar Pins, char *pThisKeys)
{
	uchar mask = 0x01;
	
	while (*pThisKeys != '\0')
 414:	20 81       	ld	r18, Z
 416:	22 23       	and	r18, r18
 418:	c1 f7       	brne	.-16     	; 0x40a <main+0x166>
		}
		while (0);
		
		if (key == 0)
		{
			if (prev_usbkey != 0)
 41a:	55 23       	and	r21, r21
 41c:	09 f4       	brne	.+2      	; 0x420 <main+0x17c>
 41e:	8b cf       	rjmp	.-234    	; 0x336 <main+0x92>
			{
				cli();
 420:	f8 94       	cli
				idle_count = 0;
 422:	10 92 e7 01 	sts	0x01E7, r1
 426:	10 92 e6 01 	sts	0x01E6, r1
				Pin_D4_Led = 1;
 42a:	70 92 e8 01 	sts	0x01E8, r7
				LED_OFF;
 42e:	5e 98       	cbi	0x0b, 6	; 11
				sei();
 430:	78 94       	sei
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	80 cf       	rjmp	.-256    	; 0x336 <main+0x92>
			phex(key);
			print(" [");
			pchar(key);
			print("]\n");
#endif
			cli();
 436:	f8 94       	cli
			idle_count = 0;
 438:	10 92 e7 01 	sts	0x01E7, r1
 43c:	10 92 e6 01 	sts	0x01E6, r1
			Pin_D4_Led = 0;
 440:	10 92 e8 01 	sts	0x01E8, r1
			LED_ON;
 444:	5e 9a       	sbi	0x0b, 6	; 11
			sei();
 446:	78 94       	sei

			usbkey = 0;
			usbmod = 0;
			
			if (key == '\n')
 448:	2a 30       	cpi	r18, 0x0A	; 10
 44a:	11 f4       	brne	.+4      	; 0x450 <main+0x1ac>
 44c:	08 e2       	ldi	r16, 0x28	; 40
 44e:	6e c0       	rjmp	.+220    	; 0x52c <main+0x288>
			{
				usbkey = KEY_ENTER;
			}
			else if (fctn)
 450:	aa 23       	and	r26, r26
 452:	09 f4       	brne	.+2      	; 0x456 <main+0x1b2>
 454:	4d c0       	rjmp	.+154    	; 0x4f0 <main+0x24c>
			{
				switch(key)
 456:	2f 34       	cpi	r18, 0x4F	; 79
 458:	c9 f1       	breq	.+114    	; 0x4cc <main+0x228>
 45a:	20 35       	cpi	r18, 0x50	; 80
 45c:	98 f4       	brcc	.+38     	; 0x484 <main+0x1e0>
 45e:	25 34       	cpi	r18, 0x45	; 69
 460:	61 f1       	breq	.+88     	; 0x4ba <main+0x216>
 462:	26 34       	cpi	r18, 0x46	; 70
 464:	40 f4       	brcc	.+16     	; 0x476 <main+0x1d2>
 466:	23 34       	cpi	r18, 0x43	; 67
 468:	09 f4       	brne	.+2      	; 0x46c <main+0x1c8>
 46a:	f2 c0       	rjmp	.+484    	; 0x650 <main+0x3ac>
 46c:	24 34       	cpi	r18, 0x44	; 68
 46e:	08 f5       	brcc	.+66     	; 0x4b2 <main+0x20e>
 470:	21 34       	cpi	r18, 0x41	; 65
 472:	f1 f5       	brne	.+124    	; 0x4f0 <main+0x24c>
 474:	20 c0       	rjmp	.+64     	; 0x4b6 <main+0x212>
 476:	27 34       	cpi	r18, 0x47	; 71
 478:	29 f1       	breq	.+74     	; 0x4c4 <main+0x220>
 47a:	27 34       	cpi	r18, 0x47	; 71
 47c:	00 f1       	brcs	.+64     	; 0x4be <main+0x21a>
 47e:	29 34       	cpi	r18, 0x49	; 73
 480:	b9 f5       	brne	.+110    	; 0x4f0 <main+0x24c>
 482:	22 c0       	rjmp	.+68     	; 0x4c8 <main+0x224>
 484:	24 35       	cpi	r18, 0x54	; 84
 486:	51 f1       	breq	.+84     	; 0x4dc <main+0x238>
 488:	25 35       	cpi	r18, 0x55	; 85
 48a:	38 f4       	brcc	.+14     	; 0x49a <main+0x1f6>
 48c:	22 35       	cpi	r18, 0x52	; 82
 48e:	11 f1       	breq	.+68     	; 0x4d4 <main+0x230>
 490:	23 35       	cpi	r18, 0x53	; 83
 492:	10 f5       	brcc	.+68     	; 0x4d8 <main+0x234>
 494:	20 35       	cpi	r18, 0x50	; 80
 496:	61 f5       	brne	.+88     	; 0x4f0 <main+0x24c>
 498:	1b c0       	rjmp	.+54     	; 0x4d0 <main+0x22c>
 49a:	27 35       	cpi	r18, 0x57	; 87
 49c:	19 f1       	breq	.+70     	; 0x4e4 <main+0x240>
 49e:	28 35       	cpi	r18, 0x58	; 88
 4a0:	18 f4       	brcc	.+6      	; 0x4a8 <main+0x204>
 4a2:	25 35       	cpi	r18, 0x55	; 85
 4a4:	29 f5       	brne	.+74     	; 0x4f0 <main+0x24c>
 4a6:	1c c0       	rjmp	.+56     	; 0x4e0 <main+0x23c>
 4a8:	28 35       	cpi	r18, 0x58	; 88
 4aa:	f1 f0       	breq	.+60     	; 0x4e8 <main+0x244>
 4ac:	2a 35       	cpi	r18, 0x5A	; 90
 4ae:	01 f5       	brne	.+64     	; 0x4f0 <main+0x24c>
 4b0:	1d c0       	rjmp	.+58     	; 0x4ec <main+0x248>
 4b2:	0f e4       	ldi	r16, 0x4F	; 79
 4b4:	ce c0       	rjmp	.+412    	; 0x652 <main+0x3ae>
 4b6:	01 e3       	ldi	r16, 0x31	; 49
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <main+0x21c>
 4ba:	02 e5       	ldi	r16, 0x52	; 82
 4bc:	ca c0       	rjmp	.+404    	; 0x652 <main+0x3ae>
				{
				case 'A': usbkey = KEY_BACKSLASH; usbmod = KEY_SHIFT; break;
				case 'C': usbkey = KEY_TILDE; usbmod = 0; break;
				case 'D': usbkey = KEY_RIGHT; usbmod = 0; break;
				case 'E': usbkey = KEY_UP; usbmod = 0; break;
 4be:	0f e2       	ldi	r16, 0x2F	; 47
 4c0:	12 e0       	ldi	r17, 0x02	; 2
 4c2:	c8 c0       	rjmp	.+400    	; 0x654 <main+0x3b0>
				case 'F': usbkey = KEY_LEFT_BRACE; usbmod = KEY_SHIFT; break;
 4c4:	00 e3       	ldi	r16, 0x30	; 48
 4c6:	fc cf       	rjmp	.-8      	; 0x4c0 <main+0x21c>
				case 'G': usbkey = KEY_RIGHT_BRACE; usbmod = KEY_SHIFT; break;
 4c8:	08 e3       	ldi	r16, 0x38	; 56
 4ca:	fa cf       	rjmp	.-12     	; 0x4c0 <main+0x21c>
				case 'I': usbkey = KEY_SLASH; usbmod = KEY_SHIFT; break;
 4cc:	04 e3       	ldi	r16, 0x34	; 52
 4ce:	c1 c0       	rjmp	.+386    	; 0x652 <main+0x3ae>
				case 'O': usbkey = KEY_QUOTE; usbmod = 0; break;
 4d0:	04 e3       	ldi	r16, 0x34	; 52
 4d2:	f6 cf       	rjmp	.-20     	; 0x4c0 <main+0x21c>
				case 'P': usbkey = KEY_QUOTE; usbmod = KEY_SHIFT; break;
 4d4:	0f e2       	ldi	r16, 0x2F	; 47
 4d6:	bd c0       	rjmp	.+378    	; 0x652 <main+0x3ae>
				case 'R': usbkey = KEY_LEFT_BRACE; usbmod = 0; break;
 4d8:	00 e5       	ldi	r16, 0x50	; 80
 4da:	bb c0       	rjmp	.+374    	; 0x652 <main+0x3ae>
				case 'S': usbkey = KEY_LEFT; usbmod = 0; break;
 4dc:	00 e3       	ldi	r16, 0x30	; 48
 4de:	b9 c0       	rjmp	.+370    	; 0x652 <main+0x3ae>
				case 'T': usbkey = KEY_RIGHT_BRACE; usbmod = 0; break;
 4e0:	0d e2       	ldi	r16, 0x2D	; 45
 4e2:	ee cf       	rjmp	.-36     	; 0x4c0 <main+0x21c>
				case 'U': usbkey = KEY_MINUS; usbmod = KEY_SHIFT; break;
 4e4:	05 e3       	ldi	r16, 0x35	; 53
 4e6:	ec cf       	rjmp	.-40     	; 0x4c0 <main+0x21c>
				case 'W': usbkey = KEY_TILDE; usbmod = KEY_SHIFT; break;
 4e8:	01 e5       	ldi	r16, 0x51	; 81
 4ea:	b3 c0       	rjmp	.+358    	; 0x652 <main+0x3ae>
				case 'X': usbkey = KEY_DOWN; usbmod = 0; break;
 4ec:	01 e3       	ldi	r16, 0x31	; 49
 4ee:	b1 c0       	rjmp	.+354    	; 0x652 <main+0x3ae>
				case 'Z': usbkey = KEY_BACKSLASH; usbmod = 0; break;
				}
				if (usbkey != 0) fctn = 0;
			}
			if ((usbkey == 0)  && (key >= ' ') && (key <= 'Z'))
 4f0:	20 32       	cpi	r18, 0x20	; 32
 4f2:	d8 f0       	brcs	.+54     	; 0x52a <main+0x286>
 4f4:	2b 35       	cpi	r18, 0x5B	; 91
 4f6:	c8 f4       	brcc	.+50     	; 0x52a <main+0x286>
			{
				if ((key == '/') && shift)
 4f8:	2f 32       	cpi	r18, 0x2F	; 47
 4fa:	29 f4       	brne	.+10     	; 0x506 <main+0x262>
 4fc:	bb 23       	and	r27, r27
 4fe:	19 f0       	breq	.+6      	; 0x506 <main+0x262>
 500:	10 e0       	ldi	r17, 0x00	; 0
 502:	0d e2       	ldi	r16, 0x2D	; 45
 504:	16 c0       	rjmp	.+44     	; 0x532 <main+0x28e>
					usbkey = KEY_MINUS;
					usbmod = 0;
				}
				else
				{
					usbkey = KeyConv[key-0x20].Usb_key;
 506:	82 2f       	mov	r24, r18
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	80 97       	sbiw	r24, 0x20	; 32
 50c:	fc 01       	movw	r30, r24
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	e8 0f       	add	r30, r24
 514:	f9 1f       	adc	r31, r25
 516:	ef 5c       	subi	r30, 0xCF	; 207
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	01 81       	ldd	r16, Z+1	; 0x01
					usbmod = KeyConv[key-0x20].Usb_modifier;
 51c:	12 81       	ldd	r17, Z+2	; 0x02
					if (caps && (key >= 'A') && (key <= 'Z'))
 51e:	d4 fc       	sbrc	r13, 4
 520:	06 c0       	rjmp	.+12     	; 0x52e <main+0x28a>
 522:	21 34       	cpi	r18, 0x41	; 65
 524:	20 f0       	brcs	.+8      	; 0x52e <main+0x28a>
					{
						usbmod |= KEY_SHIFT;
 526:	12 60       	ori	r17, 0x02	; 2
 528:	02 c0       	rjmp	.+4      	; 0x52e <main+0x28a>
 52a:	00 e0       	ldi	r16, 0x00	; 0
 52c:	10 e0       	ldi	r17, 0x00	; 0
					}
				}
			}
//When to use this??	if (caps)  usbmod |= KEY_CAPS_LOCK;
			if (shift) usbmod |= KEY_SHIFT;
 52e:	b1 11       	cpse	r27, r1
 530:	12 60       	ori	r17, 0x02	; 2
			if (ctrl)  usbmod |= KEY_CTRL;
 532:	66 ff       	sbrs	r22, 6
 534:	11 60       	ori	r17, 0x01	; 1
			if (fctn)  usbmod |= KEY_ALT;
 536:	a1 11       	cpse	r26, r1
 538:	14 60       	ori	r17, 0x04	; 4

			if (usbkey != 0)
 53a:	00 23       	and	r16, r16
 53c:	09 f4       	brne	.+2      	; 0x540 <main+0x29c>
 53e:	37 c0       	rjmp	.+110    	; 0x5ae <main+0x30a>
			{
				if ((prev_usbkey != usbkey)
 540:	50 17       	cp	r21, r16
 542:	41 f4       	brne	.+16     	; 0x554 <main+0x2b0>
 544:	41 17       	cp	r20, r17
 546:	31 f4       	brne	.+12     	; 0x554 <main+0x2b0>
 548:	8a e0       	ldi	r24, 0x0A	; 10
 54a:	f8 16       	cp	r15, r24
 54c:	19 f0       	breq	.+6      	; 0x554 <main+0x2b0>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	e8 16       	cp	r14, r24
 552:	01 f5       	brne	.+64     	; 0x594 <main+0x2f0>
				||  (arKbDelay == ARKB_DELAY)
				||  (arKbSpeed == ARKB_SPEED)
				)
				{
#if defined USBKEY_DBG
					print("UsbMod: 0x");
 554:	80 ee       	ldi	r24, 0xE0	; 224
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	7d d3       	rcall	.+1786   	; 0xc54 <print_P>
					phex(usbmod);
 55a:	81 2f       	mov	r24, r17
 55c:	71 d3       	rcall	.+1762   	; 0xc40 <phex>
					print("  UsbKey: 0x");
 55e:	83 ed       	ldi	r24, 0xD3	; 211
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	78 d3       	rcall	.+1776   	; 0xc54 <print_P>
					phex(usbkey);
 564:	80 2f       	mov	r24, r16
 566:	6c d3       	rcall	.+1752   	; 0xc40 <phex>
					print("  Delay: 0x");
 568:	87 ec       	ldi	r24, 0xC7	; 199
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	73 d3       	rcall	.+1766   	; 0xc54 <print_P>
					phex(arKbDelay);
 56e:	8f 2d       	mov	r24, r15
 570:	67 d3       	rcall	.+1742   	; 0xc40 <phex>
					print("  Speed: 0x");
 572:	8b eb       	ldi	r24, 0xBB	; 187
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	6e d3       	rcall	.+1756   	; 0xc54 <print_P>
					phex(arKbSpeed);
 578:	8e 2d       	mov	r24, r14
 57a:	62 d3       	rcall	.+1732   	; 0xc40 <phex>
					print("\n");
 57c:	89 eb       	ldi	r24, 0xB9	; 185
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	69 d3       	rcall	.+1746   	; 0xc54 <print_P>
#endif
					usb_keyboard_press(usbkey, usbmod); 
 582:	80 2f       	mov	r24, r16
 584:	61 2f       	mov	r22, r17
 586:	ca d0       	rcall	.+404    	; 0x71c <usb_keyboard_press>
					if (arKbDelay == ARKB_DELAY) arKbDelay = ARKB_DELAY+1;
 588:	8a e0       	ldi	r24, 0x0A	; 10
 58a:	f8 16       	cp	r15, r24
 58c:	11 f4       	brne	.+4      	; 0x592 <main+0x2ee>
 58e:	8b e0       	ldi	r24, 0x0B	; 11
 590:	f8 2e       	mov	r15, r24
 592:	ee 24       	eor	r14, r14
					arKbSpeed = 0;
				}
				if (bTsek)
 594:	80 91 e5 01 	lds	r24, 0x01E5
 598:	88 23       	and	r24, r24
 59a:	31 f0       	breq	.+12     	; 0x5a8 <main+0x304>
				{
					if (arKbDelay >= ARKB_DELAY) arKbSpeed++;
 59c:	89 e0       	ldi	r24, 0x09	; 9
 59e:	8f 15       	cp	r24, r15
 5a0:	10 f4       	brcc	.+4      	; 0x5a6 <main+0x302>
 5a2:	e3 94       	inc	r14
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <main+0x304>
					if (arKbDelay <  ARKB_DELAY) arKbDelay++;
 5a6:	f3 94       	inc	r15
 5a8:	50 2f       	mov	r21, r16
 5aa:	41 2f       	mov	r20, r17
 5ac:	c7 ce       	rjmp	.-626    	; 0x33c <main+0x98>
				}
			}
#if defined USBKEY_DBG
			else
			{
				print("No USB key!\n");
 5ae:	8c ea       	ldi	r24, 0xAC	; 172
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	50 d3       	rcall	.+1696   	; 0xc54 <print_P>
 5b4:	41 2f       	mov	r20, r17
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	c1 ce       	rjmp	.-638    	; 0x33c <main+0x98>
#if defined TI_SCAN_DBG
			print("1_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "NHY65GTB")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_1_Y1;
 5ba:	6a b8       	out	0x0a, r6	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_1_Y1;
 5bc:	8b b1       	in	r24, 0x0b	; 11
 5be:	8d 6b       	ori	r24, 0xBD	; 189
 5c0:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_1_Y1);
 5c2:	59 98       	cbi	0x0b, 1	; 11
 5c4:	ce 01       	movw	r24, r28
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x322>
			_delay_ms(5);
			pins = ~PINS_INP;
 5ca:	33 b1       	in	r19, 0x03	; 3
 5cc:	30 95       	com	r19
			SBO(TIKB_1_Y1);
 5ce:	59 9a       	sbi	0x0b, 1	; 11
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	e9 e0       	ldi	r30, 0x09	; 9
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	fa ce       	rjmp	.-524    	; 0x3cc <main+0x128>
#if defined TI_SCAN_DBG
			print("1_Y1="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "/;P01AQZ")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_2_Y0;
 5d8:	ca b8       	out	0x0a, r12	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y0;
 5da:	8b b1       	in	r24, 0x0b	; 11
 5dc:	8b 6b       	ori	r24, 0xBB	; 187
 5de:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y0);
 5e0:	5a 98       	cbi	0x0b, 2	; 11
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <main+0x340>
			_delay_ms(5);
			pins = ~PINS_INP;
 5e8:	33 b1       	in	r19, 0x03	; 3
 5ea:	30 95       	com	r19
			SBO(TIKB_2_Y0);
 5ec:	5a 9a       	sbi	0x0b, 2	; 11
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	e2 e1       	ldi	r30, 0x12	; 18
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	f4 ce       	rjmp	.-536    	; 0x3de <main+0x13a>
#if defined TI_SCAN_DBG
			print("2_Y0="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, "= \n")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y1;
 5f6:	5a b8       	out	0x0a, r5	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y1;
 5f8:	8b b1       	in	r24, 0x0b	; 11
 5fa:	87 6b       	ori	r24, 0xB7	; 183
 5fc:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y1);
 5fe:	5b 98       	cbi	0x0b, 3	; 11
 600:	ce 01       	movw	r24, r28
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <main+0x35e>
			_delay_ms(5);
			pins = ~PINS_INP;
 606:	33 b1       	in	r19, 0x03	; 3
 608:	30 95       	com	r19
			SBO(TIKB_2_Y1);
 60a:	5b 9a       	sbi	0x0b, 3	; 11
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	e6 e1       	ldi	r30, 0x16	; 22
 610:	f1 e0       	ldi	r31, 0x01	; 1
 612:	ee ce       	rjmp	.-548    	; 0x3f0 <main+0x14c>
#if defined TI_SCAN_DBG
			print("2_Y1="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ".LO92SWX")) != 0) break; 

			DDR_OUT = LED_OUT | TIKB_2_Y2;
 614:	4a b8       	out	0x0a, r4	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y2;
 616:	8b b1       	in	r24, 0x0b	; 11
 618:	8f 6a       	ori	r24, 0xAF	; 175
 61a:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y2);
 61c:	5c 98       	cbi	0x0b, 4	; 11
 61e:	ce 01       	movw	r24, r28
 620:	01 97       	sbiw	r24, 0x01	; 1
 622:	f1 f7       	brne	.-4      	; 0x620 <main+0x37c>
			_delay_ms(5);
			pins = ~PINS_INP;
 624:	33 b1       	in	r19, 0x03	; 3
 626:	30 95       	com	r19
			SBO(TIKB_2_Y2);
 628:	5c 9a       	sbi	0x0b, 4	; 11
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	ef e1       	ldi	r30, 0x1F	; 31
 62e:	f1 e0       	ldi	r31, 0x01	; 1
 630:	e8 ce       	rjmp	.-560    	; 0x402 <main+0x15e>
#if defined TI_SCAN_DBG
			print("2_Y2="); phex(pins); print("\n");
#endif
			if ((key = WhatKey(pins, ",KI83DEC")) != 0) break; 
		
			DDR_OUT = LED_OUT | TIKB_2_Y3;
 632:	3a b8       	out	0x0a, r3	; 10
			PORT_OUT |= OUT_PULLUP & ~TIKB_2_Y3;
 634:	8b b1       	in	r24, 0x0b	; 11
 636:	8f 69       	ori	r24, 0x9F	; 159
 638:	8b b9       	out	0x0b, r24	; 11
			SBZ(TIKB_2_Y3);
 63a:	5d 98       	cbi	0x0b, 5	; 11
 63c:	ce 01       	movw	r24, r28
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <main+0x39a>
			_delay_ms(5);
			pins = ~PINS_INP;
 642:	33 b1       	in	r19, 0x03	; 3
 644:	30 95       	com	r19
			SBO(TIKB_2_Y3);
 646:	5d 9a       	sbi	0x0b, 5	; 11
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	e8 e2       	ldi	r30, 0x28	; 40
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	e2 ce       	rjmp	.-572    	; 0x414 <main+0x170>
 650:	05 e3       	ldi	r16, 0x35	; 53
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	a0 e0       	ldi	r26, 0x00	; 0
 656:	6b cf       	rjmp	.-298    	; 0x52e <main+0x28a>

00000658 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
 65e:	80 ea       	ldi	r24, 0xA0	; 160
 660:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
 664:	82 e1       	ldi	r24, 0x12	; 18
 666:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 668:	09 b4       	in	r0, 0x29	; 41
 66a:	00 fe       	sbrs	r0, 0
 66c:	fd cf       	rjmp	.-6      	; 0x668 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 66e:	80 e9       	ldi	r24, 0x90	; 144
 670:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 674:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 678:	10 92 f1 01 	sts	0x01F1, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 67c:	8c e0       	ldi	r24, 0x0C	; 12
 67e:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 682:	78 94       	sei
}
 684:	08 95       	ret

00000686 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 686:	80 91 f1 01 	lds	r24, 0x01F1
}
 68a:	08 95       	ret

0000068c <usb_keyboard_send>:
// send the contents of keyboard_keys and keyboard_modifier_keys
int8_t usb_keyboard_send(void)
{
	uint8_t i, intr_state, timeout;

	if (!usb_configuration) return -1;
 68c:	80 91 f1 01 	lds	r24, 0x01F1
 690:	88 23       	and	r24, r24
 692:	09 f4       	brne	.+2      	; 0x696 <usb_keyboard_send+0xa>
 694:	41 c0       	rjmp	.+130    	; 0x718 <usb_keyboard_send+0x8c>
	intr_state = SREG;
 696:	2f b7       	in	r18, 0x3f	; 63
	cli();
 698:	f8 94       	cli
	UENUM = KEYBOARD_ENDPOINT;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 93 e9 00 	sts	0x00E9, r24
	timeout = UDFNUML + 50;
 6a0:	90 91 e4 00 	lds	r25, 0x00E4
 6a4:	9e 5c       	subi	r25, 0xCE	; 206
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = KEYBOARD_ENDPOINT;
 6a6:	33 e0       	ldi	r19, 0x03	; 3
	cli();
	UENUM = KEYBOARD_ENDPOINT;
	timeout = UDFNUML + 50;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 6a8:	80 91 e8 00 	lds	r24, 0x00E8
 6ac:	85 fd       	sbrc	r24, 5
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <usb_keyboard_send+0x40>
		SREG = intr_state;
 6b0:	2f bf       	out	0x3f, r18	; 63
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 6b2:	80 91 f1 01 	lds	r24, 0x01F1
 6b6:	88 23       	and	r24, r24
 6b8:	79 f1       	breq	.+94     	; 0x718 <usb_keyboard_send+0x8c>
		// have we waited too long?
		if (UDFNUML == timeout) return -1;
 6ba:	80 91 e4 00 	lds	r24, 0x00E4
 6be:	89 17       	cp	r24, r25
 6c0:	59 f1       	breq	.+86     	; 0x718 <usb_keyboard_send+0x8c>
		// get ready to try checking again
		intr_state = SREG;
 6c2:	2f b7       	in	r18, 0x3f	; 63
		cli();
 6c4:	f8 94       	cli
		UENUM = KEYBOARD_ENDPOINT;
 6c6:	30 93 e9 00 	sts	0x00E9, r19
 6ca:	ee cf       	rjmp	.-36     	; 0x6a8 <usb_keyboard_send+0x1c>
	}
	UEDATX = keyboard_modifier_keys;
 6cc:	80 91 e9 01 	lds	r24, 0x01E9
 6d0:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = 0;
 6d4:	10 92 f1 00 	sts	0x00F1, r1
	for (i=0; i<6; i++) {
		UEDATX = keyboard_keys[i];
 6d8:	80 91 ea 01 	lds	r24, 0x01EA
 6dc:	80 93 f1 00 	sts	0x00F1, r24
 6e0:	80 91 eb 01 	lds	r24, 0x01EB
 6e4:	80 93 f1 00 	sts	0x00F1, r24
 6e8:	80 91 ec 01 	lds	r24, 0x01EC
 6ec:	80 93 f1 00 	sts	0x00F1, r24
 6f0:	80 91 ed 01 	lds	r24, 0x01ED
 6f4:	80 93 f1 00 	sts	0x00F1, r24
 6f8:	80 91 ee 01 	lds	r24, 0x01EE
 6fc:	80 93 f1 00 	sts	0x00F1, r24
 700:	80 91 ef 01 	lds	r24, 0x01EF
 704:	80 93 f1 00 	sts	0x00F1, r24
	}
	UEINTX = 0x3A;
 708:	8a e3       	ldi	r24, 0x3A	; 58
 70a:	80 93 e8 00 	sts	0x00E8, r24
	keyboard_idle_count = 0;
 70e:	10 92 f2 01 	sts	0x01F2, r1
	SREG = intr_state;
 712:	2f bf       	out	0x3f, r18	; 63
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
	return 0;
 718:	8f ef       	ldi	r24, 0xFF	; 255
}
 71a:	08 95       	ret

0000071c <usb_keyboard_press>:
// perform a single keystroke
int8_t usb_keyboard_press(uint8_t key, uint8_t modifier)
{
	int8_t r;

	keyboard_modifier_keys = modifier;
 71c:	60 93 e9 01 	sts	0x01E9, r22
	keyboard_keys[0] = key;
 720:	80 93 ea 01 	sts	0x01EA, r24
	r = usb_keyboard_send();
 724:	b3 df       	rcall	.-154    	; 0x68c <usb_keyboard_send>
	if (r) return r;
 726:	88 23       	and	r24, r24
 728:	29 f4       	brne	.+10     	; 0x734 <usb_keyboard_press+0x18>
	keyboard_modifier_keys = 0;
 72a:	10 92 e9 01 	sts	0x01E9, r1
	keyboard_keys[0] = 0;
 72e:	10 92 ea 01 	sts	0x01EA, r1
	return usb_keyboard_send();
 732:	ac cf       	rjmp	.-168    	; 0x68c <usb_keyboard_send>
}
 734:	08 95       	ret

00000736 <usb_debug_putchar>:
	return 0;
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_debug_putchar(uint8_t c)
{
 736:	48 2f       	mov	r20, r24
	static uint8_t previous_timeout=0;
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 738:	80 91 f1 01 	lds	r24, 0x01F1
 73c:	88 23       	and	r24, r24
 73e:	09 f4       	brne	.+2      	; 0x742 <usb_debug_putchar+0xc>
 740:	3e c0       	rjmp	.+124    	; 0x7be <usb_debug_putchar+0x88>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 742:	2f b7       	in	r18, 0x3f	; 63
	cli();
 744:	f8 94       	cli
	UENUM = DEBUG_TX_ENDPOINT;
 746:	84 e0       	ldi	r24, 0x04	; 4
 748:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (previous_timeout) {
 74c:	80 91 f5 01 	lds	r24, 0x01F5
 750:	88 23       	and	r24, r24
 752:	41 f0       	breq	.+16     	; 0x764 <usb_debug_putchar+0x2e>
		if (!(UEINTX & (1<<RWAL))) {
 754:	80 91 e8 00 	lds	r24, 0x00E8
 758:	85 fd       	sbrc	r24, 5
 75a:	02 c0       	rjmp	.+4      	; 0x760 <usb_debug_putchar+0x2a>
			SREG = intr_state;
 75c:	2f bf       	out	0x3f, r18	; 63
 75e:	12 c0       	rjmp	.+36     	; 0x784 <usb_debug_putchar+0x4e>
			return -1;
		}
		previous_timeout = 0;
 760:	10 92 f5 01 	sts	0x01F5, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
 764:	90 91 e4 00 	lds	r25, 0x00E4
 768:	9c 5f       	subi	r25, 0xFC	; 252
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = DEBUG_TX_ENDPOINT;
 76a:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + 4;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 76c:	80 91 e8 00 	lds	r24, 0x00E8
 770:	85 fd       	sbrc	r24, 5
 772:	13 c0       	rjmp	.+38     	; 0x79a <usb_debug_putchar+0x64>
		SREG = intr_state;
 774:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?
		if (UDFNUML == timeout) {
 776:	80 91 e4 00 	lds	r24, 0x00E4
 77a:	89 17       	cp	r24, r25
 77c:	29 f4       	brne	.+10     	; 0x788 <usb_debug_putchar+0x52>
			previous_timeout = 1;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 93 f5 01 	sts	0x01F5, r24
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 788:	80 91 f1 01 	lds	r24, 0x01F1
 78c:	88 23       	and	r24, r24
 78e:	b9 f0       	breq	.+46     	; 0x7be <usb_debug_putchar+0x88>
		// get ready to try checking again
		intr_state = SREG;
 790:	2f b7       	in	r18, 0x3f	; 63
		cli();
 792:	f8 94       	cli
		UENUM = DEBUG_TX_ENDPOINT;
 794:	30 93 e9 00 	sts	0x00E9, r19
 798:	e9 cf       	rjmp	.-46     	; 0x76c <usb_debug_putchar+0x36>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 79a:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) {
 79e:	80 91 e8 00 	lds	r24, 0x00E8
 7a2:	85 fd       	sbrc	r24, 5
 7a4:	06 c0       	rjmp	.+12     	; 0x7b2 <usb_debug_putchar+0x7c>
		UEINTX = 0x3A;
 7a6:	8a e3       	ldi	r24, 0x3A	; 58
 7a8:	80 93 e8 00 	sts	0x00E8, r24
		debug_flush_timer = 0;
 7ac:	10 92 f3 01 	sts	0x01F3, r1
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <usb_debug_putchar+0x82>
	} else {
		debug_flush_timer = 2;
 7b2:	82 e0       	ldi	r24, 0x02	; 2
 7b4:	80 93 f3 01 	sts	0x01F3, r24
	}
	SREG = intr_state;
 7b8:	2f bf       	out	0x3f, r18	; 63
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	08 95       	ret
	return 0;
 7be:	8f ef       	ldi	r24, 0xFF	; 255
}
 7c0:	08 95       	ret

000007c2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	2f 93       	push	r18
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
	uint8_t intbits, t, i;
	static uint8_t div4=0;

        intbits = UDINT;
 7d2:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 7d6:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 7da:	98 2f       	mov	r25, r24
 7dc:	83 ff       	sbrs	r24, 3
 7de:	0f c0       	rjmp	.+30     	; 0x7fe <__vector_10+0x3c>
		UENUM = 0;
 7e0:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 7ea:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 7ee:	82 e2       	ldi	r24, 0x22	; 34
 7f0:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 7f4:	88 e0       	ldi	r24, 0x08	; 8
 7f6:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 7fa:	10 92 f1 01 	sts	0x01F1, r1
        }
	if ((intbits & (1<<SOFI)) && usb_configuration) {
 7fe:	92 ff       	sbrs	r25, 2
 800:	5a c0       	rjmp	.+180    	; 0x8b6 <__vector_10+0xf4>
 802:	80 91 f1 01 	lds	r24, 0x01F1
 806:	88 23       	and	r24, r24
 808:	09 f4       	brne	.+2      	; 0x80c <__vector_10+0x4a>
 80a:	55 c0       	rjmp	.+170    	; 0x8b6 <__vector_10+0xf4>
		t = debug_flush_timer;
 80c:	80 91 f3 01 	lds	r24, 0x01F3
		if (t) {
 810:	88 23       	and	r24, r24
 812:	91 f0       	breq	.+36     	; 0x838 <__vector_10+0x76>
			debug_flush_timer = -- t;
 814:	81 50       	subi	r24, 0x01	; 1
 816:	80 93 f3 01 	sts	0x01F3, r24
			if (!t) {
 81a:	88 23       	and	r24, r24
 81c:	69 f4       	brne	.+26     	; 0x838 <__vector_10+0x76>
				UENUM = DEBUG_TX_ENDPOINT;
 81e:	84 e0       	ldi	r24, 0x04	; 4
 820:	80 93 e9 00 	sts	0x00E9, r24
 824:	02 c0       	rjmp	.+4      	; 0x82a <__vector_10+0x68>
				while ((UEINTX & (1<<RWAL))) {
					UEDATX = 0;
 826:	10 92 f1 00 	sts	0x00F1, r1
		t = debug_flush_timer;
		if (t) {
			debug_flush_timer = -- t;
			if (!t) {
				UENUM = DEBUG_TX_ENDPOINT;
				while ((UEINTX & (1<<RWAL))) {
 82a:	80 91 e8 00 	lds	r24, 0x00E8
 82e:	85 fd       	sbrc	r24, 5
 830:	fa cf       	rjmp	.-12     	; 0x826 <__vector_10+0x64>
					UEDATX = 0;
				}
				UEINTX = 0x3A;
 832:	8a e3       	ldi	r24, 0x3A	; 58
 834:	80 93 e8 00 	sts	0x00E8, r24
			}
		}
		if (keyboard_idle_config && (++div4 & 3) == 0) {
 838:	20 91 e2 01 	lds	r18, 0x01E2
 83c:	22 23       	and	r18, r18
 83e:	d9 f1       	breq	.+118    	; 0x8b6 <__vector_10+0xf4>
 840:	80 91 f4 01 	lds	r24, 0x01F4
 844:	8f 5f       	subi	r24, 0xFF	; 255
 846:	80 93 f4 01 	sts	0x01F4, r24
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	83 70       	andi	r24, 0x03	; 3
 84e:	90 70       	andi	r25, 0x00	; 0
 850:	89 2b       	or	r24, r25
 852:	89 f5       	brne	.+98     	; 0x8b6 <__vector_10+0xf4>
			UENUM = KEYBOARD_ENDPOINT;
 854:	83 e0       	ldi	r24, 0x03	; 3
 856:	80 93 e9 00 	sts	0x00E9, r24
			if (UEINTX & (1<<RWAL)) {
 85a:	80 91 e8 00 	lds	r24, 0x00E8
 85e:	85 ff       	sbrs	r24, 5
 860:	2a c0       	rjmp	.+84     	; 0x8b6 <__vector_10+0xf4>
				keyboard_idle_count++;
 862:	80 91 f2 01 	lds	r24, 0x01F2
 866:	8f 5f       	subi	r24, 0xFF	; 255
 868:	80 93 f2 01 	sts	0x01F2, r24
				if (keyboard_idle_count == keyboard_idle_config) {
 86c:	82 17       	cp	r24, r18
 86e:	19 f5       	brne	.+70     	; 0x8b6 <__vector_10+0xf4>
					keyboard_idle_count = 0;
 870:	10 92 f2 01 	sts	0x01F2, r1
					UEDATX = keyboard_modifier_keys;
 874:	80 91 e9 01 	lds	r24, 0x01E9
 878:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 87c:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 880:	80 91 ea 01 	lds	r24, 0x01EA
 884:	80 93 f1 00 	sts	0x00F1, r24
 888:	80 91 eb 01 	lds	r24, 0x01EB
 88c:	80 93 f1 00 	sts	0x00F1, r24
 890:	80 91 ec 01 	lds	r24, 0x01EC
 894:	80 93 f1 00 	sts	0x00F1, r24
 898:	80 91 ed 01 	lds	r24, 0x01ED
 89c:	80 93 f1 00 	sts	0x00F1, r24
 8a0:	80 91 ee 01 	lds	r24, 0x01EE
 8a4:	80 93 f1 00 	sts	0x00F1, r24
 8a8:	80 91 ef 01 	lds	r24, 0x01EF
 8ac:	80 93 f1 00 	sts	0x00F1, r24
					}
					UEINTX = 0x3A;
 8b0:	8a e3       	ldi	r24, 0x3A	; 58
 8b2:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 8b6:	9f 91       	pop	r25
 8b8:	8f 91       	pop	r24
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	ef 93       	push	r30
 8ea:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 8ec:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
 8f0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 8f4:	83 ff       	sbrs	r24, 3
 8f6:	86 c1       	rjmp	.+780    	; 0xc04 <__stack+0x105>
                bmRequestType = UEDATX;
 8f8:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 8fc:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 900:	80 91 f1 00 	lds	r24, 0x00F1
 904:	a8 2f       	mov	r26, r24
 906:	b0 e0       	ldi	r27, 0x00	; 0
                wValue |= (UEDATX << 8);
 908:	20 91 f1 00 	lds	r18, 0x00F1
 90c:	92 2f       	mov	r25, r18
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	a8 2b       	or	r26, r24
 912:	b9 2b       	or	r27, r25
                wIndex = UEDATX;
 914:	80 91 f1 00 	lds	r24, 0x00F1
 918:	68 2f       	mov	r22, r24
 91a:	70 e0       	ldi	r23, 0x00	; 0
                wIndex |= (UEDATX << 8);
 91c:	20 91 f1 00 	lds	r18, 0x00F1
 920:	92 2f       	mov	r25, r18
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	68 2b       	or	r22, r24
 926:	79 2b       	or	r23, r25
                wLength = UEDATX;
 928:	80 91 f1 00 	lds	r24, 0x00F1
 92c:	c8 2f       	mov	r28, r24
 92e:	d0 e0       	ldi	r29, 0x00	; 0
                wLength |= (UEDATX << 8);
 930:	20 91 f1 00 	lds	r18, 0x00F1
 934:	92 2f       	mov	r25, r18
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	c8 2b       	or	r28, r24
 93a:	d9 2b       	or	r29, r25
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 93c:	82 ef       	ldi	r24, 0xF2	; 242
 93e:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 942:	36 30       	cpi	r19, 0x06	; 6
 944:	09 f0       	breq	.+2      	; 0x948 <__vector_11+0x82>
 946:	56 c0       	rjmp	.+172    	; 0x9f4 <__vector_11+0x12e>
 948:	22 ef       	ldi	r18, 0xF2	; 242
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	a9 01       	movw	r20, r18
 94e:	45 50       	subi	r20, 0x05	; 5
 950:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 952:	f9 01       	movw	r30, r18
 954:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 956:	85 91       	lpm	r24, Z+
 958:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 95a:	8a 17       	cp	r24, r26
 95c:	9b 07       	cpc	r25, r27
 95e:	e1 f4       	brne	.+56     	; 0x998 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 960:	fa 01       	movw	r30, r20
 962:	85 91       	lpm	r24, Z+
 964:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 966:	86 17       	cp	r24, r22
 968:	97 07       	cpc	r25, r23
 96a:	b1 f4       	brne	.+44     	; 0x998 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 96c:	9a 01       	movw	r18, r20
 96e:	2e 5f       	subi	r18, 0xFE	; 254
 970:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 972:	f9 01       	movw	r30, r18
 974:	65 91       	lpm	r22, Z+
 976:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 978:	2e 5f       	subi	r18, 0xFE	; 254
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
 97c:	f9 01       	movw	r30, r18
 97e:	24 91       	lpm	r18, Z+
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 980:	ce 01       	movw	r24, r28
 982:	cf 3f       	cpi	r28, 0xFF	; 255
 984:	d1 05       	cpc	r29, r1
 986:	19 f0       	breq	.+6      	; 0x98e <__vector_11+0xc8>
 988:	10 f0       	brcs	.+4      	; 0x98e <__vector_11+0xc8>
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	42 2f       	mov	r20, r18
 990:	82 17       	cp	r24, r18
 992:	58 f4       	brcc	.+22     	; 0x9aa <__vector_11+0xe4>
 994:	48 2f       	mov	r20, r24
 996:	09 c0       	rjmp	.+18     	; 0x9aa <__vector_11+0xe4>
 998:	29 5f       	subi	r18, 0xF9	; 249
 99a:	3f 4f       	sbci	r19, 0xFF	; 255
 99c:	49 5f       	subi	r20, 0xF9	; 249
 99e:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 9a0:	f1 e0       	ldi	r31, 0x01	; 1
 9a2:	21 33       	cpi	r18, 0x31	; 49
 9a4:	3f 07       	cpc	r19, r31
 9a6:	a9 f6       	brne	.-86     	; 0x952 <__vector_11+0x8c>
 9a8:	2d c1       	rjmp	.+602    	; 0xc04 <__stack+0x105>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9aa:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 9ac:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 9b0:	28 2f       	mov	r18, r24
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	c9 01       	movw	r24, r18
 9b6:	85 70       	andi	r24, 0x05	; 5
 9b8:	90 70       	andi	r25, 0x00	; 0
 9ba:	89 2b       	or	r24, r25
 9bc:	b9 f3       	breq	.-18     	; 0x9ac <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 9be:	22 fd       	sbrc	r18, 2
 9c0:	24 c1       	rjmp	.+584    	; 0xc0a <__stack+0x10b>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 9c2:	34 2f       	mov	r19, r20
 9c4:	41 32       	cpi	r20, 0x21	; 33
 9c6:	08 f0       	brcs	.+2      	; 0x9ca <__vector_11+0x104>
 9c8:	30 e2       	ldi	r19, 0x20	; 32
 9ca:	23 2f       	mov	r18, r19
 9cc:	cb 01       	movw	r24, r22
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <__vector_11+0x116>
				for (i = n; i; i--) {
 9d0:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	e4 91       	lpm	r30, Z+
 9d6:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 9da:	21 50       	subi	r18, 0x01	; 1
 9dc:	22 23       	and	r18, r18
 9de:	c1 f7       	brne	.-16     	; 0x9d0 <__vector_11+0x10a>
 9e0:	63 0f       	add	r22, r19
 9e2:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 9e4:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9e6:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 9ea:	44 23       	and	r20, r20
 9ec:	f9 f6       	brne	.-66     	; 0x9ac <__vector_11+0xe6>
 9ee:	30 32       	cpi	r19, 0x20	; 32
 9f0:	e9 f2       	breq	.-70     	; 0x9ac <__vector_11+0xe6>
 9f2:	0b c1       	rjmp	.+534    	; 0xc0a <__stack+0x10b>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 9f4:	35 30       	cpi	r19, 0x05	; 5
 9f6:	61 f4       	brne	.+24     	; 0xa10 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 9f8:	8e ef       	ldi	r24, 0xFE	; 254
 9fa:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 9fe:	80 91 e8 00 	lds	r24, 0x00E8
 a02:	80 ff       	sbrs	r24, 0
 a04:	fc cf       	rjmp	.-8      	; 0x9fe <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 a06:	8a 2f       	mov	r24, r26
 a08:	80 68       	ori	r24, 0x80	; 128
 a0a:	80 93 e3 00 	sts	0x00E3, r24
 a0e:	fd c0       	rjmp	.+506    	; 0xc0a <__stack+0x10b>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 a10:	39 30       	cpi	r19, 0x09	; 9
 a12:	31 f5       	brne	.+76     	; 0xa60 <__vector_11+0x19a>
 a14:	44 23       	and	r20, r20
 a16:	09 f0       	breq	.+2      	; 0xa1a <__vector_11+0x154>
 a18:	70 c0       	rjmp	.+224    	; 0xafa <__vector_11+0x234>
			usb_configuration = wValue;
 a1a:	a0 93 f1 01 	sts	0x01F1, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 a1e:	8e ef       	ldi	r24, 0xFE	; 254
 a20:	80 93 e8 00 	sts	0x00E8, r24
 a24:	8a e2       	ldi	r24, 0x2A	; 42
 a26:	91 e0       	ldi	r25, 0x01	; 1
 a28:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 a2a:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 a2e:	fc 01       	movw	r30, r24
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	e4 91       	lpm	r30, Z+
				UECONX = en;
 a34:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 a38:	ee 23       	and	r30, r30
 a3a:	69 f0       	breq	.+26     	; 0xa56 <__vector_11+0x190>
					UECFG0X = pgm_read_byte(cfg++);
 a3c:	ac 01       	movw	r20, r24
 a3e:	4f 5f       	subi	r20, 0xFF	; 255
 a40:	5f 4f       	sbci	r21, 0xFF	; 255
 a42:	fc 01       	movw	r30, r24
 a44:	84 91       	lpm	r24, Z+
 a46:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 a4a:	ca 01       	movw	r24, r20
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	fa 01       	movw	r30, r20
 a50:	34 91       	lpm	r19, Z+
 a52:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 a56:	2f 5f       	subi	r18, 0xFF	; 255
 a58:	25 30       	cpi	r18, 0x05	; 5
 a5a:	39 f7       	brne	.-50     	; 0xa2a <__vector_11+0x164>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 a5c:	8e e1       	ldi	r24, 0x1E	; 30
 a5e:	48 c0       	rjmp	.+144    	; 0xaf0 <__vector_11+0x22a>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 a60:	38 30       	cpi	r19, 0x08	; 8
 a62:	51 f4       	brne	.+20     	; 0xa78 <__vector_11+0x1b2>
 a64:	40 38       	cpi	r20, 0x80	; 128
 a66:	09 f0       	breq	.+2      	; 0xa6a <__vector_11+0x1a4>
 a68:	48 c0       	rjmp	.+144    	; 0xafa <__vector_11+0x234>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a6a:	80 91 e8 00 	lds	r24, 0x00E8
 a6e:	80 ff       	sbrs	r24, 0
 a70:	fc cf       	rjmp	.-8      	; 0xa6a <__vector_11+0x1a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 a72:	80 91 f1 01 	lds	r24, 0x01F1
 a76:	7c c0       	rjmp	.+248    	; 0xb70 <__stack+0x71>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
 a78:	33 23       	and	r19, r19
 a7a:	d1 f4       	brne	.+52     	; 0xab0 <__vector_11+0x1ea>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 a7c:	80 91 e8 00 	lds	r24, 0x00E8
 a80:	80 ff       	sbrs	r24, 0
 a82:	fc cf       	rjmp	.-8      	; 0xa7c <__vector_11+0x1b6>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 a84:	42 38       	cpi	r20, 0x82	; 130
 a86:	11 f0       	breq	.+4      	; 0xa8c <__vector_11+0x1c6>
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__vector_11+0x1e0>
				UENUM = wIndex;
 a8c:	60 93 e9 00 	sts	0x00E9, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
 a90:	80 91 eb 00 	lds	r24, 0x00EB
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	25 e0       	ldi	r18, 0x05	; 5
 a98:	96 95       	lsr	r25
 a9a:	87 95       	ror	r24
 a9c:	2a 95       	dec	r18
 a9e:	e1 f7       	brne	.-8      	; 0xa98 <__vector_11+0x1d2>
 aa0:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 aa2:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 aa6:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 aaa:	10 92 f1 00 	sts	0x00F1, r1
 aae:	7f c0       	rjmp	.+254    	; 0xbae <__stack+0xaf>
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 ab0:	31 30       	cpi	r19, 0x01	; 1
 ab2:	11 f0       	breq	.+4      	; 0xab8 <__vector_11+0x1f2>
 ab4:	33 30       	cpi	r19, 0x03	; 3
 ab6:	09 f5       	brne	.+66     	; 0xafa <__vector_11+0x234>
 ab8:	42 30       	cpi	r20, 0x02	; 2
 aba:	f9 f4       	brne	.+62     	; 0xafa <__vector_11+0x234>
 abc:	10 97       	sbiw	r26, 0x00	; 0
 abe:	e9 f4       	brne	.+58     	; 0xafa <__vector_11+0x234>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 ac0:	26 2f       	mov	r18, r22
 ac2:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 ac4:	82 2f       	mov	r24, r18
 ac6:	81 50       	subi	r24, 0x01	; 1
 ac8:	84 30       	cpi	r24, 0x04	; 4
 aca:	b8 f4       	brcc	.+46     	; 0xafa <__vector_11+0x234>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 acc:	8e ef       	ldi	r24, 0xFE	; 254
 ace:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 ad2:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 ad6:	33 30       	cpi	r19, 0x03	; 3
 ad8:	09 f4       	brne	.+2      	; 0xadc <__vector_11+0x216>
 ada:	94 c0       	rjmp	.+296    	; 0xc04 <__stack+0x105>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 adc:	89 e1       	ldi	r24, 0x19	; 25
 ade:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <__vector_11+0x226>
 ae8:	88 0f       	add	r24, r24
 aea:	99 1f       	adc	r25, r25
 aec:	2a 95       	dec	r18
 aee:	e2 f7       	brpl	.-8      	; 0xae8 <__vector_11+0x222>
 af0:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 af4:	10 92 ea 00 	sts	0x00EA, r1
 af8:	88 c0       	rjmp	.+272    	; 0xc0a <__stack+0x10b>
				}
				return;
			}
		}
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
 afa:	61 15       	cp	r22, r1
 afc:	71 05       	cpc	r23, r1
 afe:	09 f0       	breq	.+2      	; 0xb02 <__stack+0x3>
 b00:	5a c0       	rjmp	.+180    	; 0xbb6 <__stack+0xb7>
			if (bmRequestType == 0xA1) {
 b02:	41 3a       	cpi	r20, 0xA1	; 161
 b04:	c1 f5       	brne	.+112    	; 0xb76 <__stack+0x77>
				if (bRequest == HID_GET_REPORT) {
 b06:	31 30       	cpi	r19, 0x01	; 1
 b08:	09 f5       	brne	.+66     	; 0xb4c <__stack+0x4d>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b0a:	80 91 e8 00 	lds	r24, 0x00E8
 b0e:	80 ff       	sbrs	r24, 0
 b10:	fc cf       	rjmp	.-8      	; 0xb0a <__stack+0xb>
		#endif
		if (wIndex == KEYBOARD_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = keyboard_modifier_keys;
 b12:	80 91 e9 01 	lds	r24, 0x01E9
 b16:	80 93 f1 00 	sts	0x00F1, r24
					UEDATX = 0;
 b1a:	10 92 f1 00 	sts	0x00F1, r1
					for (i=0; i<6; i++) {
						UEDATX = keyboard_keys[i];
 b1e:	80 91 ea 01 	lds	r24, 0x01EA
 b22:	80 93 f1 00 	sts	0x00F1, r24
 b26:	80 91 eb 01 	lds	r24, 0x01EB
 b2a:	80 93 f1 00 	sts	0x00F1, r24
 b2e:	80 91 ec 01 	lds	r24, 0x01EC
 b32:	80 93 f1 00 	sts	0x00F1, r24
 b36:	80 91 ed 01 	lds	r24, 0x01ED
 b3a:	80 93 f1 00 	sts	0x00F1, r24
 b3e:	80 91 ee 01 	lds	r24, 0x01EE
 b42:	80 93 f1 00 	sts	0x00F1, r24
 b46:	80 91 ef 01 	lds	r24, 0x01EF
 b4a:	12 c0       	rjmp	.+36     	; 0xb70 <__stack+0x71>
					}
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
 b4c:	32 30       	cpi	r19, 0x02	; 2
 b4e:	39 f4       	brne	.+14     	; 0xb5e <__stack+0x5f>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b50:	80 91 e8 00 	lds	r24, 0x00E8
 b54:	80 ff       	sbrs	r24, 0
 b56:	fc cf       	rjmp	.-8      	; 0xb50 <__stack+0x51>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_IDLE) {
					usb_wait_in_ready();
					UEDATX = keyboard_idle_config;
 b58:	80 91 e2 01 	lds	r24, 0x01E2
 b5c:	09 c0       	rjmp	.+18     	; 0xb70 <__stack+0x71>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
 b5e:	33 30       	cpi	r19, 0x03	; 3
 b60:	09 f0       	breq	.+2      	; 0xb64 <__stack+0x65>
 b62:	50 c0       	rjmp	.+160    	; 0xc04 <__stack+0x105>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 b64:	80 91 e8 00 	lds	r24, 0x00E8
 b68:	80 ff       	sbrs	r24, 0
 b6a:	fc cf       	rjmp	.-8      	; 0xb64 <__stack+0x65>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = keyboard_protocol;
 b6c:	80 91 e3 01 	lds	r24, 0x01E3
 b70:	80 93 f1 00 	sts	0x00F1, r24
 b74:	1c c0       	rjmp	.+56     	; 0xbae <__stack+0xaf>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
 b76:	41 32       	cpi	r20, 0x21	; 33
 b78:	09 f0       	breq	.+2      	; 0xb7c <__stack+0x7d>
 b7a:	44 c0       	rjmp	.+136    	; 0xc04 <__stack+0x105>
				if (bRequest == HID_SET_REPORT) {
 b7c:	39 30       	cpi	r19, 0x09	; 9
 b7e:	61 f4       	brne	.+24     	; 0xb98 <__stack+0x99>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 b80:	80 91 e8 00 	lds	r24, 0x00E8
 b84:	82 ff       	sbrs	r24, 2
 b86:	fc cf       	rjmp	.-8      	; 0xb80 <__stack+0x81>
				}
			}
			if (bmRequestType == 0x21) {
				if (bRequest == HID_SET_REPORT) {
					usb_wait_receive_out();
					keyboard_leds = UEDATX;
 b88:	80 91 f1 00 	lds	r24, 0x00F1
 b8c:	80 93 f0 01 	sts	0x01F0, r24
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 b90:	8b ef       	ldi	r24, 0xFB	; 251
 b92:	80 93 e8 00 	sts	0x00E8, r24
 b96:	0b c0       	rjmp	.+22     	; 0xbae <__stack+0xaf>
					keyboard_leds = UEDATX;
					usb_ack_out();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_IDLE) {
 b98:	3a 30       	cpi	r19, 0x0A	; 10
 b9a:	29 f4       	brne	.+10     	; 0xba6 <__stack+0xa7>
					keyboard_idle_config = (wValue >> 8);
 b9c:	b0 93 e2 01 	sts	0x01E2, r27
					keyboard_idle_count = 0;
 ba0:	10 92 f2 01 	sts	0x01F2, r1
 ba4:	04 c0       	rjmp	.+8      	; 0xbae <__stack+0xaf>
					//usb_wait_in_ready();
					usb_send_in();
					return;
				}
				if (bRequest == HID_SET_PROTOCOL) {
 ba6:	3b 30       	cpi	r19, 0x0B	; 11
 ba8:	69 f5       	brne	.+90     	; 0xc04 <__stack+0x105>
					keyboard_protocol = wValue;
 baa:	a0 93 e3 01 	sts	0x01E3, r26
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bae:	8e ef       	ldi	r24, 0xFE	; 254
 bb0:	80 93 e8 00 	sts	0x00E8, r24
 bb4:	2a c0       	rjmp	.+84     	; 0xc0a <__stack+0x10b>
					usb_send_in();
					return;
				}
			}
		}
		if (wIndex == DEBUG_INTERFACE) {
 bb6:	61 30       	cpi	r22, 0x01	; 1
 bb8:	71 05       	cpc	r23, r1
 bba:	21 f5       	brne	.+72     	; 0xc04 <__stack+0x105>
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 bbc:	31 30       	cpi	r19, 0x01	; 1
 bbe:	11 f5       	brne	.+68     	; 0xc04 <__stack+0x105>
 bc0:	41 3a       	cpi	r20, 0xA1	; 161
 bc2:	01 f5       	brne	.+64     	; 0xc04 <__stack+0x105>
				len = wLength;
 bc4:	4c 2f       	mov	r20, r28
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bc6:	5e ef       	ldi	r21, 0xFE	; 254
			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
				len = wLength;
				do {
					// wait for host ready for IN packet
					do {
						i = UEINTX;
 bc8:	80 91 e8 00 	lds	r24, 0x00E8
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 bcc:	28 2f       	mov	r18, r24
 bce:	30 e0       	ldi	r19, 0x00	; 0
 bd0:	c9 01       	movw	r24, r18
 bd2:	85 70       	andi	r24, 0x05	; 5
 bd4:	90 70       	andi	r25, 0x00	; 0
 bd6:	89 2b       	or	r24, r25
 bd8:	b9 f3       	breq	.-18     	; 0xbc8 <__stack+0xc9>
					if (i & (1<<RXOUTI)) return;	// abort
 bda:	22 fd       	sbrc	r18, 2
 bdc:	16 c0       	rjmp	.+44     	; 0xc0a <__stack+0x10b>
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 bde:	94 2f       	mov	r25, r20
 be0:	41 32       	cpi	r20, 0x21	; 33
 be2:	08 f0       	brcs	.+2      	; 0xbe6 <__stack+0xe7>
 be4:	90 e2       	ldi	r25, 0x20	; 32
 be6:	89 2f       	mov	r24, r25
 be8:	03 c0       	rjmp	.+6      	; 0xbf0 <__stack+0xf1>
					for (i = n; i; i--) {
						UEDATX = 0;
 bea:	10 92 f1 00 	sts	0x00F1, r1
						i = UEINTX;
					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
					if (i & (1<<RXOUTI)) return;	// abort
					// send IN packet
					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
					for (i = n; i; i--) {
 bee:	81 50       	subi	r24, 0x01	; 1
 bf0:	88 23       	and	r24, r24
 bf2:	d9 f7       	brne	.-10     	; 0xbea <__stack+0xeb>
						UEDATX = 0;
					}
					len -= n;
 bf4:	49 1b       	sub	r20, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 bf6:	50 93 e8 00 	sts	0x00E8, r21
					for (i = n; i; i--) {
						UEDATX = 0;
					}
					len -= n;
					usb_send_in();
				} while (len || n == ENDPOINT0_SIZE);
 bfa:	44 23       	and	r20, r20
 bfc:	29 f7       	brne	.-54     	; 0xbc8 <__stack+0xc9>
 bfe:	90 32       	cpi	r25, 0x20	; 32
 c00:	19 f3       	breq	.-58     	; 0xbc8 <__stack+0xc9>
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <__stack+0x10b>
				return;
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 c04:	81 e2       	ldi	r24, 0x21	; 33
 c06:	80 93 eb 00 	sts	0x00EB, r24
}
 c0a:	ff 91       	pop	r31
 c0c:	ef 91       	pop	r30
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	bf 91       	pop	r27
 c14:	af 91       	pop	r26
 c16:	9f 91       	pop	r25
 c18:	8f 91       	pop	r24
 c1a:	7f 91       	pop	r23
 c1c:	6f 91       	pop	r22
 c1e:	5f 91       	pop	r21
 c20:	4f 91       	pop	r20
 c22:	3f 91       	pop	r19
 c24:	2f 91       	pop	r18
 c26:	0f 90       	pop	r0
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	0f 90       	pop	r0
 c2c:	1f 90       	pop	r1
 c2e:	18 95       	reti

00000c30 <phex1>:
		usb_debug_putchar(c);
	}
}

void phex1(unsigned char c)
{
 c30:	98 2f       	mov	r25, r24
	usb_debug_putchar(c + ((c < 10) ? '0' : 'A' - 10));
 c32:	8a 30       	cpi	r24, 0x0A	; 10
 c34:	10 f0       	brcs	.+4      	; 0xc3a <phex1+0xa>
 c36:	87 e3       	ldi	r24, 0x37	; 55
 c38:	01 c0       	rjmp	.+2      	; 0xc3c <phex1+0xc>
 c3a:	80 e3       	ldi	r24, 0x30	; 48
 c3c:	89 0f       	add	r24, r25
}
 c3e:	7b cd       	rjmp	.-1290   	; 0x736 <usb_debug_putchar>

00000c40 <phex>:

void phex(unsigned char c)
{
 c40:	1f 93       	push	r17
 c42:	18 2f       	mov	r17, r24
	phex1(c >> 4);
 c44:	82 95       	swap	r24
 c46:	8f 70       	andi	r24, 0x0F	; 15
 c48:	f3 df       	rcall	.-26     	; 0xc30 <phex1>
	phex1(c & 15);
 c4a:	81 2f       	mov	r24, r17
 c4c:	8f 70       	andi	r24, 0x0F	; 15
 c4e:	f0 df       	rcall	.-32     	; 0xc30 <phex1>
}
 c50:	1f 91       	pop	r17
 c52:	08 95       	ret

00000c54 <print_P>:
#include <avr/pgmspace.h>

#include "print.h"

void print_P(const char *s)
{
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	ec 01       	movw	r28, r24
 c5c:	fe 01       	movw	r30, r28
	char c;

	while (1) {
		c = pgm_read_byte(s++);
 c5e:	21 96       	adiw	r28, 0x01	; 1
 c60:	14 91       	lpm	r17, Z+
		if (!c) break;
 c62:	11 23       	and	r17, r17
 c64:	39 f0       	breq	.+14     	; 0xc74 <print_P+0x20>
		if (c == '\n') usb_debug_putchar('\r');
 c66:	1a 30       	cpi	r17, 0x0A	; 10
 c68:	11 f4       	brne	.+4      	; 0xc6e <print_P+0x1a>
 c6a:	8d e0       	ldi	r24, 0x0D	; 13
 c6c:	64 dd       	rcall	.-1336   	; 0x736 <usb_debug_putchar>
		usb_debug_putchar(c);
 c6e:	81 2f       	mov	r24, r17
 c70:	62 dd       	rcall	.-1340   	; 0x736 <usb_debug_putchar>
 c72:	f4 cf       	rjmp	.-24     	; 0xc5c <print_P+0x8>
	}
}
 c74:	df 91       	pop	r29
 c76:	cf 91       	pop	r28
 c78:	1f 91       	pop	r17
 c7a:	08 95       	ret

00000c7c <_exit>:
 c7c:	f8 94       	cli

00000c7e <__stop_program>:
 c7e:	ff cf       	rjmp	.-2      	; 0xc7e <__stop_program>
